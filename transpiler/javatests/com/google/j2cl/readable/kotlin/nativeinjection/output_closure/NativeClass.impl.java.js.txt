goog.module('nativeinjection.NativeClass$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

/**
 * @final
 */
class NativeClass extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {!NativeClass} */
 static $create__() {
  NativeClass.$clinit();
  let $instance = new NativeClass();
  $instance.$ctor__nativeinjection_NativeClass__void();
  return $instance;
 }
 /** @nodts */
 $ctor__nativeinjection_NativeClass__void() {
  this.$ctor__java_lang_Object__void();
 }
 // /** @final @return {string} */
 // native nativeInstanceMethod() 
 // /** @return {!NativeClass} */
 // native static nativeStaticMethod() 
 // /** @return {!NativeClass} */
 // native static notPublicNativeStaticMethod() 
 /** @nodts */
 static $clinit() {
  NativeClass.$clinit = () =>{};
  NativeClass.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof NativeClass;
 }
 
 /** @nodts */
 static $loadModules() {}
}
$Util.$setClassMetadata(NativeClass, 'nativeinjection.NativeClass');

/* NATIVE.JS EPILOG */

const nativeinjection_NativeClass = NativeClass;

// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Replaces the native instance method 'nativeInstanceMethod' in NativeClass.
 * @return {string}
 * @public
 */
NativeClass.prototype.nativeInstanceMethod = function() {
  return 'nativeInstanceMethod';
};

/**
 * Replaces the native static method 'nativeStaticMethod' in NativeClass.
 * @return {NativeClass}
 * @public
 */
NativeClass.nativeStaticMethod = function() {
  return null;
};

/**
 * Replaces the native static method 'notPublicNativeStaticMethod' in
 * NativeClass.
 * @return {NativeClass}
 * @public
 */
NativeClass.notPublicNativeStaticMethod = function() {
  return null;
};


exports = NativeClass;

//# sourceMappingURL=NativeClass.js.map
