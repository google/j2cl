// Generated from "autovalue/AutoValue_ImplementingAutoValue.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "INCOMPATIBLE_OBJC_NAME_OVERRIDE",
 "REDUNDANT_ELSE_IN_WHEN")

package autovalue

import javaemul.lang.*
import autovalue.ImplementingAutoValue
import java.lang.NullPointerException
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress

class AutoValue_ImplementingAutoValue: ImplementingAutoValue {
 private val foo: String?

 internal constructor(foo: String?) {
  if (foo == null) {
   throw NullPointerException("Null foo")
  }
  this.foo = foo
 }

 override fun getFoo(): String? {
  return this.foo
 }

 override fun toString(): String {
  return "ImplementingAutoValue{" + "foo=" + this.foo + "}"
 }

 override fun equals(o: Any?): Boolean {
  if (o === this) {
   return true
  }
  if (o is ImplementingAutoValue) {
   val that: ImplementingAutoValue? = o as ImplementingAutoValue?
   return this.foo!!.equals(
    that!!.getFoo(),
   )
  }
  return false
 }

 override fun hashCode(): Int {
  var h___: Int = 1
  h___ = h___ * 1000003
  h___ = h___.xor(
   this.foo!!.hashCode(),
  )
  return h___
 }
}
