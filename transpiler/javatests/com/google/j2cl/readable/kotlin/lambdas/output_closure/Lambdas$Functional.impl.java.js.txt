goog.module('lambdas.Lambdas.Functional$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('lambdas.Lambdas.Functional.$LambdaAdaptor$impl');

/**
 * @interface
 * @template T
 */
class Functional {
 /** @abstract @nodts @return {Functional<T>} */
 m_wrap__lambdas_Lambdas_Functional__lambdas_Lambdas_Functional(/** !Functional<T> */ f) {}
 /** @nodts @template T @return {!Functional<T>} */
 static $adapt(/** ?function(!Functional<T>):Functional<T> */ fn) {
  Functional.$clinit();
  return /**@type {!$LambdaAdaptor<T>}*/ (new $LambdaAdaptor(fn));
 }
 /** @nodts */
 static $clinit() {
  Functional.$clinit = () =>{};
  Functional.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  ctor.prototype.$implements__lambdas_Lambdas_Functional = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__lambdas_Lambdas_Functional;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('lambdas.Lambdas.Functional.$LambdaAdaptor$impl');
 }
}
Functional.$markImplementor(/**@type {Function}*/ (Functional));
$Util.$setClassMetadataForInterface(/**@type {Function}*/ (Functional), 'lambdas.Lambdas$Functional');

exports = Functional;

//# sourceMappingURL=Lambdas$Functional.js.map
