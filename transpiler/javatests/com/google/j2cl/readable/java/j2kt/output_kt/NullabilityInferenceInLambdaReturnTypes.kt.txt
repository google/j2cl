// Generated from "j2kt/NullabilityInferenceInLambdaReturnTypes.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "INCOMPATIBLE_OBJC_NAME_OVERRIDE",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import java.lang.RuntimeException
import kotlin.Any
import kotlin.Suppress
import kotlin.jvm.JvmStatic

open class NullabilityInferenceInLambdaReturnTypes {
 private fun testAccept() {
  NullabilityInferenceInLambdaReturnTypes.accept_pp_j2kt<Any?>(
   Supplier {
    return@Supplier null
   },
  )
 }

 private fun testTransformAndAccept() {
  NullabilityInferenceInLambdaReturnTypes.accept_pp_j2kt<Any?>(
   NullabilityInferenceInLambdaReturnTypes.transform_pp_j2kt<Any?>(
    Supplier {
     return@Supplier null
    },
   ),
  )
 }

 private fun <V> testReturnArgument_expliciParameterType(): Operator<Foo<V>> {
  return Operator { foo: Foo<V> ->
   return@Operator foo
  }
 }

 private fun <V> testReturnArgument_inferredParameterType(): Operator<Foo<V>> {
  return Operator { foo: Foo<V> ->
   return@Operator foo
  }
 }

 private fun <V> testReturnLocal_explicitParameterType(): Operator<Foo<V>> {
  return Operator { foo: Foo<V> ->
   val localFoo: Foo<V> = foo
   return@Operator localFoo
  }
 }

 private fun <V> testReturnLocal_inferredParameterType(): Operator<Foo<V>> {
  return Operator { foo: Foo<V> ->
   val localFoo: Foo<V> = foo
   return@Operator localFoo
  }
 }

 companion object {
  @JvmStatic
  internal fun <V> accept_pp_j2kt(supplier: Supplier<V>) {
   throw RuntimeException()
  }

  @JvmStatic
  internal fun <V> transform_pp_j2kt(supplier: Supplier<V>): Supplier<V> {
   throw RuntimeException()
  }
 }

 interface Foo<V>

 fun interface Supplier<V> {
  fun get(): V
 }

 fun interface Operator<V> {
  fun apply(v: V): V
 }
}
