goog.module('lambdas.Lambdas.FunctionalInterfaceWithMethodReturningVoid$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('lambdas.Lambdas.FunctionalInterfaceWithMethodReturningVoid.$LambdaAdaptor$impl');

/**
 * @interface
 */
class FunctionalInterfaceWithMethodReturningVoid {
 /** @abstract @nodts */
 m_run__void() {}
 /** @nodts @return {!FunctionalInterfaceWithMethodReturningVoid} */
 static $adapt(/** ?function():void */ fn) {
  FunctionalInterfaceWithMethodReturningVoid.$clinit();
  return new $LambdaAdaptor(fn);
 }
 /** @nodts */
 static $clinit() {
  FunctionalInterfaceWithMethodReturningVoid.$clinit = () =>{};
  FunctionalInterfaceWithMethodReturningVoid.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  ctor.prototype.$implements__lambdas_Lambdas_FunctionalInterfaceWithMethodReturningVoid = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__lambdas_Lambdas_FunctionalInterfaceWithMethodReturningVoid;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('lambdas.Lambdas.FunctionalInterfaceWithMethodReturningVoid.$LambdaAdaptor$impl');
 }
}
FunctionalInterfaceWithMethodReturningVoid.$markImplementor(/**@type {Function}*/ (FunctionalInterfaceWithMethodReturningVoid));
$Util.$setClassMetadataForInterface(/**@type {Function}*/ (FunctionalInterfaceWithMethodReturningVoid), 'lambdas.Lambdas$FunctionalInterfaceWithMethodReturningVoid');

exports = FunctionalInterfaceWithMethodReturningVoid;

//# sourceMappingURL=Lambdas$FunctionalInterfaceWithMethodReturningVoid.js.map
