goog.module('bridgejsmethod.Main.B$impl');

const A = goog.require('bridgejsmethod.Main.A$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @extends {A<string>}
 */
class B extends A {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {!B} */
 static $create__() {
  B.$clinit();
  let $instance = new B();
  $instance.$ctor__bridgejsmethod_Main_B__void();
  return $instance;
 }
 /** @nodts */
 $ctor__bridgejsmethod_Main_B__void() {
  this.$ctor__bridgejsmethod_Main_A__void();
 }
 /** @nodts @return {string} */
 m_f__java_lang_String__java_lang_String(/** string */ s) {
  return s;
 }
 
 bar(/** string */ s) {}
 //Bridge method.
 /** @final @override @suppress{visibility} @return {string} */
 f(/** string */ arg0) {
  return this.m_f__java_lang_String__java_lang_String(/**@type {string}*/ ($Casts.$to(arg0, j_l_String)));
 }
 //Bridge method.
 /** @final @override @nodts @suppress{visibility} */
 m_bar__java_lang_Object__void(/** string */ arg0) {
  this.bar(/**@type {string}*/ ($Casts.$to(arg0, j_l_String)));
 }
 /** @nodts */
 static $clinit() {
  B.$clinit = () =>{};
  B.$loadModules();
  A.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof B;
 }
 
 /** @nodts */
 static $loadModules() {
  j_l_String = goog.module.get('java.lang.String$impl');
  $Casts = goog.module.get('vmbootstrap.Casts$impl');
 }
}
$Util.$setClassMetadata(B, 'bridgejsmethod.Main$B');

exports = B;

//# sourceMappingURL=Main$B.js.map
