// Generated from "j2ktnewobjcname/ClassExample.java"
@file:OptIn(ExperimentalObjCName::class)
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2ktnewobjcname

import javaemul.lang.*
import java.util.AbstractList
import java.util.HashMap
import java.util.LinkedList
import java.util.StringJoiner
import kotlin.Any
import kotlin.Boolean
import kotlin.Byte
import kotlin.Char
import kotlin.Double
import kotlin.Float
import kotlin.Int
import kotlin.Long
import kotlin.Number
import kotlin.OptIn
import kotlin.Short
import kotlin.String
import kotlin.Suppress
import kotlin.collections.HashSet
import kotlin.collections.MutableCollection
import kotlin.collections.MutableIterable
import kotlin.collections.MutableIterator
import kotlin.collections.MutableList
import kotlin.collections.MutableListIterator
import kotlin.collections.MutableMap
import kotlin.collections.MutableSet
import kotlin.experimental.ExperimentalObjCName
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.native.ObjCName

@ObjCName("J2ktNewClassExample", swiftName = "NewClassExample", exact = true)
open class ClassExample {
 @JvmField
 var publicField: Int = 0

 @JvmField
 var protectedField: Int = 0

 @JvmField
 internal var packagePrivateField_pp_j2ktnewobjcname: Int = 0

 private var privateField: Int = 0

 constructor()

 constructor(
  @ObjCName("Integer") i: Int
 )

 constructor(i: Int, s: String)

 @ObjCName("J2ktNewClassExampleCompanion", swiftName = "NewClassExampleCompanion", exact = true)
 companion object {
  @JvmField
  var publicStaticField: Int = 0

  @JvmField
  var protectedStaticField: Int = 0

  @JvmField
  internal var packagePrivateStaticField_pp_j2ktnewobjcname: Int = 0

  private var privateStaticField: Int = 0

  @JvmField
  var objectField: Any? = null

  @JvmField
  var stringField: String? = null

  @JvmField
  var selfField: ClassExample? = null

  @JvmField
  var iterable: MutableIterable<String>? = null

  @JvmField
  var iterator: MutableIterator<String>? = null

  @JvmField
  var collection: MutableCollection<Any?>? = null

  @JvmField
  var `val`: Int = 0

  @JvmField
  var `var`: Int = 0

  @JvmField
  var `fun`: Int = 0

  @JvmField
  var alloc: Int = 0

  @JvmField
  var init: Int = 0

  @JvmField
  var extern: Int = 0

  @JvmField
  var inline: Int = 0

  @JvmField
  var NULL: Int = 0

  @JvmField
  var allocFoo: Int = 0

  @JvmField
  var initFoo: Int = 0

  @JvmField
  var newFoo: Int = 0

  const val BOOLEAN_FALSE: Boolean = false

  const val BOOLEAN_TRUE: Boolean = true

  const val CHAR: Char = 'a'

  const val CHAR_APOSTROPHE: Char = '\''

  const val CHAR_BACKSLASH: Char = '\\'

  const val CHAR_UNICODE: Char = '\u1231'

  const val BYTE: Byte = 123.toByte()

  const val SHORT: Short = 123.toShort()

  const val INT: Int = 123

  const val INT_MIN_VALUE: Int = -2147483647 - 1

  const val INT_MAX_VALUE: Int = 2147483647

  const val LONG: Long = 123L

  const val LONG_MIN_VALUE: Long = -9223372036854775807L - 1L

  const val LONG_MAX_VALUE: Long = 9223372036854775807L

  const val FLOAT: Float = 123.0f

  const val FLOAT_ZER0: Float = 0.0f

  const val FLOAT_NEGATIVE_ZERO: Float = -0.0f

  const val FLOAT_NAN: Float = (0.0f / 0.0f)

  const val FLOAT_NEGATIVE_INFINITY: Float = (-1.0f / 0.0f)

  const val FLOAT_POSITIVE_INFINITY: Float = (1.0f / 0.0f)

  const val FLOAT_MIN_VALUE: Float = 1.4E-45f

  const val FLOAT_MIN_NORMAL: Float = 1.1754944E-38f

  const val FLOAT_MIN_EXPONENT: Float = -126.0f

  const val FLOAT_MAX_VALUE: Float = 3.4028235E38f

  const val FLOAT_MAX_EXPONENT: Float = 127.0f

  const val DOUBLE: Double = 123.0

  const val DOUBLE_ZER0: Double = 0.0

  const val DOUBLE_NEGATIVE_ZERO: Double = -0.0

  const val DOUBLE_NAN: Double = (0.0 / 0.0)

  const val DOUBLE_NEGATIVE_INFINITY: Double = (-1.0 / 0.0)

  const val DOUBLE_POSITIVE_INFINITY: Double = (1.0 / 0.0)

  const val DOUBLE_MIN_VALUE: Double = 4.9E-324

  const val DOUBLE_MIN_NORMAL: Double = 2.2250738585072014E-308

  const val DOUBLE_MIN_EXPONENT: Double = -1022.0

  const val DOUBLE_MAX_VALUE: Double = 1.7976931348623157E308

  const val DOUBLE_MAX_EXPONENT: Double = 1023.0

  const val STRING: String = "foo"

  @JvmStatic
  @ObjCName("newFoo")
  fun foo() {}

  @JvmStatic
  @ObjCName("newProtectedFoo")
  fun protectedFoo() {}

  @JvmStatic
  @ObjCName("newFooFrom")
  fun newFoo(
   @ObjCName("Int") i: Int
  ) {}

  @JvmStatic
  @ObjCName("newFooFrom")
  fun foo(
   @ObjCName("Int") s: String,
   @ObjCName("withInteger") i: Int
  ) {}

  @JvmStatic
  fun foo(s: String, i: String) {}

  @JvmStatic
  fun `val`() {}

  @JvmStatic
  fun `var`() {}

  @JvmStatic
  fun `fun`() {}

  @JvmStatic
  fun alloc() {}

  @JvmStatic
  fun allocBar() {}

  @JvmStatic
  fun allocatedBar() {}

  @JvmStatic
  fun init() {}

  @JvmStatic
  fun initialize() {}

  @JvmStatic
  fun initBar() {}

  @JvmStatic
  fun newBar() {}

  @JvmStatic
  fun copyBar() {}

  @JvmStatic
  fun mutableCopyBar() {}

  @JvmStatic
  fun reservedParamNames(extern: Int, struct: Int, register: Int, inline: Int) {}

  @JvmStatic
  fun nativeTypes(s: String, o: Any, n: Number): String {
   return s
  }

  @JvmStatic
  fun numberType(l: Number) {}

  @JvmStatic
  fun booleanType(l: Boolean) {}

  @JvmStatic
  fun characterType(l: Char) {}

  @JvmStatic
  fun byteType(l: Byte) {}

  @JvmStatic
  fun shortType(l: Short) {}

  @JvmStatic
  fun integerType(l: Int) {}

  @JvmStatic
  fun longType(l: Long) {}

  @JvmStatic
  fun floatType(l: Float) {}

  @JvmStatic
  fun doubleType(l: Double) {}

  @JvmStatic
  fun iterableType(l: MutableIterable<String>) {}

  @JvmStatic
  fun iteratorType(l: MutableIterator<String>) {}

  @JvmStatic
  fun listIteratorType(l: MutableListIterator<String>) {}

  @JvmStatic
  fun collectionType(l: MutableCollection<String>) {}

  @JvmStatic
  fun listType(l: MutableList<String>) {}

  @JvmStatic
  fun setType(l: MutableSet<String>) {}

  @JvmStatic
  fun mapType(l: MutableMap<String, String>) {}

  @JvmStatic
  fun linkedListType(l: LinkedList<String>) {}

  @JvmStatic
  fun hashSetType(l: HashSet<String>) {}

  @JvmStatic
  fun hashMapType(l: HashMap<String, String>) {}

  @JvmStatic
  fun nonNativeJavaType(l: StringJoiner) {}
 }

 enum class Foo {
  `val`,
  `var`,
  `fun`,
  alloc,
  `init`,
  initialize,
  allocFoo,
  initFoo,
  newFoo,
  copyFoo,
  mutableCopyFoo,
  register,
  struct,
  NULL,
  YES,
  NO;

  companion object {
   @JvmStatic
   fun withOrdinal(ordinal: Int): Foo {
    return Foo.values()[ordinal]
   }
  }
 }

 open class SubCollection<E>: AbstractList<E>() {
  override fun get(index: Int): E {
   return null as E
  }

  override val size: Int
   get() {
    return 0
   }

  companion object {
   @JvmStatic
   fun staticMethod() {}
  }

  open class InnerClass {
   companion object {
    @JvmStatic
    fun staticMethod() {}
   }
  }
 }

 open class NonCollection {
  companion object {
   @JvmStatic
   fun staticMethod() {}
  }
 }
}
