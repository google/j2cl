goog.module('nullability.StringComparator$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const Comparator = goog.require('java.util.Comparator$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Comparable = goog.forwardDeclare('java.lang.Comparable$impl');
let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let j_u_function_Function = goog.forwardDeclare('java.util.function.Function$impl');
let ToDoubleFunction = goog.forwardDeclare('java.util.function.ToDoubleFunction$impl');
let ToIntFunction = goog.forwardDeclare('java.util.function.ToIntFunction$impl');
let ToLongFunction = goog.forwardDeclare('java.util.function.ToLongFunction$impl');
let $Long = goog.forwardDeclare('nativebootstrap.Long$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @final
 * @implements {Comparator<string>}
 */
class StringComparator extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {!StringComparator} */
 static $create__() {
  StringComparator.$clinit();
  let $instance = new StringComparator();
  $instance.$ctor__nullability_StringComparator__void();
  return $instance;
 }
 /** @nodts */
 $ctor__nullability_StringComparator__void() {
  this.$ctor__java_lang_Object__void();
 }
 /** @nodts @return {number} */
 m_compare__java_lang_String__java_lang_String__int(/** string */ a, /** string */ b) {
  return 0;
 }
 //Bridge method.
 /** @final @override @nodts @suppress{visibility} @return {number} */
 m_compare__java_lang_Object__java_lang_Object__int(/** string */ arg0, /** string */ arg1) {
  return this.m_compare__java_lang_String__java_lang_String__int(/**@type {string}*/ ($Casts.$to(arg0, j_l_String)), /**@type {string}*/ ($Casts.$to(arg1, j_l_String)));
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} @return {Comparator<string>} */
 m_reversed__java_util_Comparator() {
  return /**@type {Comparator<string>}*/ (Comparator.m_reversed__$default__java_util_Comparator__java_util_Comparator(this));
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} @return {Comparator<string>} */
 m_thenComparing__java_util_Comparator__java_util_Comparator(/** Comparator<?> */ arg0) {
  return /**@type {Comparator<string>}*/ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_Comparator__java_util_Comparator(this, arg0));
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} @template U @return {Comparator<string>} */
 m_thenComparing__java_util_function_Function__java_util_Comparator__java_util_Comparator(/** j_u_function_Function<?, ?> */ arg0, /** Comparator<?> */ arg1) {
  return /**@type {Comparator<string>}*/ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function__java_util_Comparator__java_util_Comparator(this, arg0, arg1));
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} @template U @return {Comparator<string>} */
 m_thenComparing__java_util_function_Function__java_util_Comparator(/** j_u_function_Function<?, ?> */ arg0) {
  return /**@type {Comparator<string>}*/ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function__java_util_Comparator(this, arg0));
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} @return {Comparator<string>} */
 m_thenComparingInt__java_util_function_ToIntFunction__java_util_Comparator(/** ToIntFunction<?> */ arg0) {
  return /**@type {Comparator<string>}*/ (Comparator.m_thenComparingInt__$default__java_util_Comparator__java_util_function_ToIntFunction__java_util_Comparator(this, arg0));
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} @return {Comparator<string>} */
 m_thenComparingLong__java_util_function_ToLongFunction__java_util_Comparator(/** ToLongFunction<?> */ arg0) {
  return /**@type {Comparator<string>}*/ (Comparator.m_thenComparingLong__$default__java_util_Comparator__java_util_function_ToLongFunction__java_util_Comparator(this, arg0));
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} @return {Comparator<string>} */
 m_thenComparingDouble__java_util_function_ToDoubleFunction__java_util_Comparator(/** ToDoubleFunction<?> */ arg0) {
  return /**@type {Comparator<string>}*/ (Comparator.m_thenComparingDouble__$default__java_util_Comparator__java_util_function_ToDoubleFunction__java_util_Comparator(this, arg0));
 }
 /** @nodts */
 static $clinit() {
  StringComparator.$clinit = () =>{};
  StringComparator.$loadModules();
  j_l_Object.$clinit();
  Comparator.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof StringComparator;
 }
 
 /** @nodts */
 static $loadModules() {
  j_l_String = goog.module.get('java.lang.String$impl');
  $Casts = goog.module.get('vmbootstrap.Casts$impl');
 }
}
Comparator.$markImplementor(StringComparator);
$Util.$setClassMetadata(StringComparator, 'nullability.StringComparator');

exports = StringComparator;

//# sourceMappingURL=StringComparator.js.map
