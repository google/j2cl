// Generated from "jstypecastsinstanceof/CastToTypeVariable.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "INCOMPATIBLE_OBJC_NAME_OVERRIDE",
 "REDUNDANT_ELSE_IN_WHEN")

package jstypecastsinstanceof

import javaemul.lang.*
import jsinterop.annotations.JsOverlay
import jsinterop.annotations.JsPackage
import jsinterop.annotations.JsType
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.Int
import kotlin.Suppress

@JsType(name = "Object", namespace = JsPackage.GLOBAL, isNative = true)
open class CastToTypeVariable<T: CastToTypeVariable<T>?> {
 @JsOverlay
 fun setField(index: Int, value: Boolean): T {
  val o: Any = Any()
  val a: Array<T>? = o as Array<T>?
  return this as (T & Any)
 }
}
