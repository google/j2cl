goog.module('jsoptional.Main.NonJsTypeSubtype$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const I = goog.require('jsoptional.Main.I$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @final
 * @implements {I<string>}
 */
class NonJsTypeSubtype extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {!NonJsTypeSubtype} */
 static $create__() {
  NonJsTypeSubtype.$clinit();
  let $instance = new NonJsTypeSubtype();
  $instance.$ctor__jsoptional_Main_NonJsTypeSubtype__void();
  return $instance;
 }
 /** @nodts */
 $ctor__jsoptional_Main_NonJsTypeSubtype__void() {
  this.$ctor__java_lang_Object__void();
 }
 /** @nodts */
 m_m__java_lang_String__java_lang_Object__void(/** string */ t, /** * */ o) {}
 //Bridge method.
 /** @override @suppress{visibility} */
 m(/** string */ arg0, /** *= */ arg1) {
  this.m_m__java_lang_String__java_lang_Object__void(/**@type {string}*/ ($Casts.$to(arg0, j_l_String)), arg1);
 }
 /** @nodts */
 static $clinit() {
  NonJsTypeSubtype.$clinit = () =>{};
  NonJsTypeSubtype.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof NonJsTypeSubtype;
 }
 
 /** @nodts */
 static $loadModules() {
  j_l_String = goog.module.get('java.lang.String$impl');
  $Casts = goog.module.get('vmbootstrap.Casts$impl');
 }
}
I.$markImplementor(NonJsTypeSubtype);
$Util.$setClassMetadata(NonJsTypeSubtype, 'jsoptional.Main$NonJsTypeSubtype');

exports = NonJsTypeSubtype;

//# sourceMappingURL=Main$NonJsTypeSubtype.js.map
