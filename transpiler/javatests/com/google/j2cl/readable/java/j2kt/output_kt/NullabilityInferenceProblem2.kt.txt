// Generated from "j2kt/NullabilityInferenceProblem2.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "INCOMPATIBLE_OBJC_NAME_OVERRIDE",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import java.lang.RuntimeException
import kotlin.Suppress

open class NullabilityInferenceProblem2 {
 fun interface Supplier<T> {
  fun get(): T
 }

 abstract inner class Test<T> {
  open fun <E: T> foo(supplier: Supplier<E>): E {
   val local: E? = supplier.get()
   return this.foo<E>(
    local as E,
    supplier.get(),
   )
  }

  open fun <E: T> foo(a: E, b: E): E {
   throw RuntimeException()
  }
 }
}
