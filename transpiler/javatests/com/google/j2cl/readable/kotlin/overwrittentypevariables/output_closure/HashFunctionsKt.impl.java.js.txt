goog.module('overwrittentypevariables.HashFunctionsKt$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Enum = goog.forwardDeclare('java.lang.Enum$impl');
let HashFunction = goog.forwardDeclare('overwrittentypevariables.HashFunction$impl');
let $1 = goog.forwardDeclare('overwrittentypevariables.HashFunctionsKt.$1$impl');
let $2 = goog.forwardDeclare('overwrittentypevariables.HashFunctionsKt.$2$impl');

/**
 * @final
 */
class HashFunctionsKt extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {!HashFunctionsKt} */
 static $create__() {
  HashFunctionsKt.$clinit();
  let $instance = new HashFunctionsKt();
  $instance.$ctor__overwrittentypevariables_HashFunctionsKt__void();
  return $instance;
 }
 /** @nodts */
 $ctor__overwrittentypevariables_HashFunctionsKt__void() {
  this.$ctor__java_lang_Object__void();
 }
 /** @nodts @template T @return {!HashFunction<T>} */
 static m_hashFunction__overwrittentypevariables_HashFunction() {
  HashFunctionsKt.$clinit();
  return /**@type {!$1<T>}*/ ($1.$create__());
 }
 /** @nodts @template T @return {!HashFunction<T>} */
 static m_enumHashFunction__overwrittentypevariables_HashFunction() {
  HashFunctionsKt.$clinit();
  return /**@type {!$2<T>}*/ ($2.$create__());
 }
 /** @nodts */
 static $clinit() {
  HashFunctionsKt.$clinit = () =>{};
  HashFunctionsKt.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof HashFunctionsKt;
 }
 
 /** @nodts */
 static $loadModules() {
  $1 = goog.module.get('overwrittentypevariables.HashFunctionsKt.$1$impl');
  $2 = goog.module.get('overwrittentypevariables.HashFunctionsKt.$2$impl');
 }
}
$Util.$setClassMetadata(HashFunctionsKt, 'overwrittentypevariables.HashFunctionsKt');

exports = HashFunctionsKt;

//# sourceMappingURL=HashFunctionsKt.js.map
