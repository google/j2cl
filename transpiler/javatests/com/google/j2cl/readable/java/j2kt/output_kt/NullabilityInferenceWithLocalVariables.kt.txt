// Generated from "j2kt/NullabilityInferenceWithLocalVariables.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "INCOMPATIBLE_OBJC_NAME_OVERRIDE",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import java.lang.RuntimeException
import kotlin.Any
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.arrayOf
import kotlin.jvm.JvmStatic

open class NullabilityInferenceWithLocalVariables {
 companion object {
  @JvmStatic
  fun testArray(): Array<String> {
   val local: String = ""
   return arrayOf<String>(local, "")
  }

  @JvmStatic
  fun testConstructor(): Foo<String> {
   val local: String = ""
   return Foo<Any?>(local, "") as Foo<String>
  }

  @JvmStatic
  fun testMethod(): Foo<String> {
   val local: String = ""
   return Foo.foo<String>(local, "")
  }

  @JvmStatic
  fun testMethodChain(): Foo<String> {
   val l1: String = ""
   return Foo.foo<String>(l1).chain_pp_j2kt(
    Foo.foo<String>(""),
   )
  }
 }

 open class Foo<T> {
  internal constructor(t1: T, t2: T)

  internal open fun chain_pp_j2kt(foo: Foo<T>): Foo<T> {
   throw RuntimeException()
  }

  companion object {
   @JvmStatic
   fun <T> foo(t: T): Foo<T> {
    throw RuntimeException()
   }

   @JvmStatic
   fun <T> foo(t1: T, t2: T): Foo<T> {
    throw RuntimeException()
   }
  }
 }
}
