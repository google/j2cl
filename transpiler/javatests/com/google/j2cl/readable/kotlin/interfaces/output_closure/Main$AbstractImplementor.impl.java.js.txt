goog.module('interfaces.Main.AbstractImplementor$impl');

const SubInterface = goog.require('interfaces.Main.SubInterface$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Main = goog.forwardDeclare('interfaces.Main$impl');
let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @abstract
 * @implements {SubInterface}
 */
class AbstractImplementor extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
  /**@type {!Main} @nodts*/
  this.$outer_this__interfaces_Main_AbstractImplementor;
 }
 /** @nodts */
 $ctor__interfaces_Main_AbstractImplementor__interfaces_Main__void(/** !Main */ $outer_this) {
  this.$outer_this__interfaces_Main_AbstractImplementor = $outer_this;
  this.$ctor__java_lang_Object__void();
 }
 //Bridge method.
 /** @final @override @nodts @suppress{visibility} */
 m_defaultMethod__java_lang_Object__void(/** ?string */ arg0) {
  SubInterface.m_defaultMethod__$default__interfaces_Main_SubInterface__java_lang_String__void(this, /**@type {?string}*/ ($Casts.$to(arg0, j_l_String)));
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} */
 m_defaultMethod__java_lang_String__void(/** ?string */ arg0) {
  SubInterface.m_defaultMethod__$default__interfaces_Main_SubInterface__java_lang_String__void(this, arg0);
 }
 /** @nodts */
 static $clinit() {
  AbstractImplementor.$clinit = () =>{};
  AbstractImplementor.$loadModules();
  j_l_Object.$clinit();
  SubInterface.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof AbstractImplementor;
 }
 /** @abstract @override @nodts @suppress{visibility} */
 m_interfaceMethod__void() {}
 
 /** @nodts */
 static $loadModules() {
  j_l_String = goog.module.get('java.lang.String$impl');
  $Casts = goog.module.get('vmbootstrap.Casts$impl');
 }
}
SubInterface.$markImplementor(AbstractImplementor);
$Util.$setClassMetadata(AbstractImplementor, 'interfaces.Main$AbstractImplementor');

exports = AbstractImplementor;

//# sourceMappingURL=Main$AbstractImplementor.js.map
