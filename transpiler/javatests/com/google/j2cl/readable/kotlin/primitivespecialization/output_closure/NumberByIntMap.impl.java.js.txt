goog.module('primitivespecialization.NumberByIntMap$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const Map = goog.require('java.util.Map$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let Number = goog.forwardDeclare('java.lang.Number$impl');
let RuntimeException = goog.forwardDeclare('java.lang.RuntimeException$impl');
let Collection = goog.forwardDeclare('java.util.Collection$impl');
let Entry = goog.forwardDeclare('java.util.Map.Entry$impl');
let Set = goog.forwardDeclare('java.util.Set$impl');
let BiConsumer = goog.forwardDeclare('java.util.function.BiConsumer$impl');
let BiFunction = goog.forwardDeclare('java.util.function.BiFunction$impl');
let j_u_function_Function = goog.forwardDeclare('java.util.function.Function$impl');
let Intrinsics = goog.forwardDeclare('kotlin.jvm.internal.Intrinsics$impl');
let $Long = goog.forwardDeclare('nativebootstrap.Long$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');
let $Exceptions = goog.forwardDeclare('vmbootstrap.Exceptions$impl');

/**
 * @final
 * @implements {Map<!Integer, !(Number|number|!$Long)>}
 */
class NumberByIntMap extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {!NumberByIntMap} */
 static $create__() {
  let $instance = new NumberByIntMap();
  $instance.$ctor__primitivespecialization_NumberByIntMap__void();
  return $instance;
 }
 /** @nodts */
 $ctor__primitivespecialization_NumberByIntMap__void() {
  this.$ctor__java_lang_Object__void();
 }
 /** @nodts @return {!Set<?>} */
 m_getEntries__java_util_Set() {
  throw $Exceptions.toJs(RuntimeException.$create__());
 }
 /** @nodts @return {!Set<?>} */
 m_getKeys__java_util_Set() {
  throw $Exceptions.toJs(RuntimeException.$create__());
 }
 /** @nodts @return {number} */
 m_getSize__int() {
  throw $Exceptions.toJs(RuntimeException.$create__());
 }
 /** @nodts @return {!Collection<?>} */
 m_getValues__java_util_Collection() {
  throw $Exceptions.toJs(RuntimeException.$create__());
 }
 /** @nodts @return {boolean} */
 m_containsKey__int__boolean(/** number */ key) {
  throw $Exceptions.toJs(RuntimeException.$create__());
 }
 /** @nodts @return {boolean} */
 m_containsValue__java_lang_Number__boolean(/** !(Number|number|!$Long) */ value) {
  throw $Exceptions.toJs(RuntimeException.$create__());
 }
 /** @nodts @return {!(Number|number|!$Long)} */
 m_get__int__java_lang_Number(/** number */ key) {
  throw $Exceptions.toJs(RuntimeException.$create__());
 }
 /** @override @return {boolean} */
 isEmpty() {
  throw $Exceptions.toJs(RuntimeException.$create__());
 }
 /** @nodts @return {(Number|number|!$Long)} */
 m_put__int__java_lang_Number__java_lang_Number(/** number */ key, /** !(Number|number|!$Long) */ value) {
  return Intrinsics.m_throwUnsupportedOperationException__java_lang_String__kotlin_jvm_internal_NothingStub('Operation is not supported for read-only collection');
 }
 /** @override @return {(Number|number|!$Long)} */
 remove(/** * */ key) {
  return Intrinsics.m_throwUnsupportedOperationException__java_lang_String__kotlin_jvm_internal_NothingStub('Operation is not supported for read-only collection');
 }
 /** @override @nodts @return {boolean} */
 m_remove__java_lang_Object__java_lang_Object__boolean(/** * */ key, /** * */ value) {
  return Intrinsics.m_throwUnsupportedOperationException__java_lang_String__kotlin_jvm_internal_NothingStub('Operation is not supported for read-only collection');
 }
 /** @override */
 putAll(/** !Map<?, ?> */ from) {
  Intrinsics.m_throwUnsupportedOperationException__java_lang_String__kotlin_jvm_internal_NothingStub('Operation is not supported for read-only collection');
 }
 /** @override */
 clear() {
  Intrinsics.m_throwUnsupportedOperationException__java_lang_String__kotlin_jvm_internal_NothingStub('Operation is not supported for read-only collection');
 }
 /** @nodts @return {(Number|number|!$Long)} */
 m_compute__java_lang_Integer__java_util_function_BiFunction__java_lang_Number(/** !Integer */ key, /** !BiFunction<?, ?, ?> */ remappingFunction) {
  return Intrinsics.m_throwUnsupportedOperationException__java_lang_String__kotlin_jvm_internal_NothingStub('Operation is not supported for read-only collection');
 }
 /** @nodts @return {!(Number|number|!$Long)} */
 m_computeIfAbsent__java_lang_Integer__java_util_function_Function__java_lang_Number(/** !Integer */ key, /** !j_u_function_Function<?, ?> */ remappingFunction) {
  return Intrinsics.m_throwUnsupportedOperationException__java_lang_String__kotlin_jvm_internal_NothingStub('Operation is not supported for read-only collection');
 }
 /** @nodts @return {(Number|number|!$Long)} */
 m_computeIfPresent__java_lang_Integer__java_util_function_BiFunction__java_lang_Number(/** !Integer */ key, /** !BiFunction<?, ?, ?> */ remappingFunction) {
  return Intrinsics.m_throwUnsupportedOperationException__java_lang_String__kotlin_jvm_internal_NothingStub('Operation is not supported for read-only collection');
 }
 /** @nodts @return {(Number|number|!$Long)} */
 m_merge__java_lang_Integer__java_lang_Number__java_util_function_BiFunction__java_lang_Number(/** !Integer */ key, /** !(Number|number|!$Long) */ value, /** !BiFunction<?, ?, ?> */ remappingFunction) {
  return Intrinsics.m_throwUnsupportedOperationException__java_lang_String__kotlin_jvm_internal_NothingStub('Operation is not supported for read-only collection');
 }
 /** @nodts @return {(Number|number|!$Long)} */
 m_putIfAbsent__java_lang_Integer__java_lang_Number__java_lang_Number(/** !Integer */ key, /** !(Number|number|!$Long) */ value) {
  return Intrinsics.m_throwUnsupportedOperationException__java_lang_String__kotlin_jvm_internal_NothingStub('Operation is not supported for read-only collection');
 }
 /** @nodts @return {(Number|number|!$Long)} */
 m_replace__java_lang_Integer__java_lang_Number__java_lang_Number(/** !Integer */ key, /** !(Number|number|!$Long) */ value) {
  return Intrinsics.m_throwUnsupportedOperationException__java_lang_String__kotlin_jvm_internal_NothingStub('Operation is not supported for read-only collection');
 }
 /** @nodts @return {boolean} */
 m_replace__java_lang_Integer__java_lang_Number__java_lang_Number__boolean(/** !Integer */ key, /** !(Number|number|!$Long) */ oldValue, /** !(Number|number|!$Long) */ newValue) {
  return Intrinsics.m_throwUnsupportedOperationException__java_lang_String__kotlin_jvm_internal_NothingStub('Operation is not supported for read-only collection');
 }
 /** @override @nodts */
 m_replaceAll__java_util_function_BiFunction__void(/** !BiFunction<?, ?, ?> */ function_1) {
  Intrinsics.m_throwUnsupportedOperationException__java_lang_String__kotlin_jvm_internal_NothingStub('Operation is not supported for read-only collection');
 }
 /** @final @override @return {!Set<?>} */
 entrySet() {
  return this.m_getEntries__java_util_Set();
 }
 /** @final @override @return {!Set<?>} */
 keySet() {
  return this.m_getKeys__java_util_Set();
 }
 /** @final @override @return {number} */
 size() {
  return this.m_getSize__int();
 }
 /** @final @override @return {!Collection<?>} */
 values() {
  return this.m_getValues__java_util_Collection();
 }
 /** @final @override @return {boolean} */
 containsKey(/** * */ key) {
  if (!Integer.$isInstance(key)) {
   return false;
  }
  return this.m_containsKey__int__boolean((/**@type {!Integer}*/ ($Casts.$to(key, Integer))).intValue());
 }
 /** @final @override @return {boolean} */
 containsValue(/** * */ value) {
  if (!Number.$isInstance(value)) {
   return false;
  }
  return this.m_containsValue__java_lang_Number__boolean(/**@type {!(Number|number|!$Long)}*/ (value));
 }
 /** @final @override @return {!(Number|number|!$Long)} */
 get(/** * */ key) {
  if (!Integer.$isInstance(key)) {
   return null;
  }
  return this.m_get__int__java_lang_Number((/**@type {!Integer}*/ ($Casts.$to(key, Integer))).intValue());
 }
 //Bridge method.
 /** @final @override @nodts @suppress{visibility} @return {(Number|number|!$Long)} */
 m_compute__java_lang_Object__java_util_function_BiFunction__java_lang_Object(/** !Integer */ arg0, /** !BiFunction<?, ?, ?> */ arg1) {
  return this.m_compute__java_lang_Integer__java_util_function_BiFunction__java_lang_Number(/**@type {!Integer}*/ ($Casts.$to(arg0, Integer)), arg1);
 }
 //Bridge method.
 /** @final @override @nodts @suppress{visibility} @return {!(Number|number|!$Long)} */
 m_computeIfAbsent__java_lang_Object__java_util_function_Function__java_lang_Object(/** !Integer */ arg0, /** !j_u_function_Function<?, ?> */ arg1) {
  return this.m_computeIfAbsent__java_lang_Integer__java_util_function_Function__java_lang_Number(/**@type {!Integer}*/ ($Casts.$to(arg0, Integer)), arg1);
 }
 //Bridge method.
 /** @final @override @nodts @suppress{visibility} @return {(Number|number|!$Long)} */
 m_computeIfPresent__java_lang_Object__java_util_function_BiFunction__java_lang_Object(/** !Integer */ arg0, /** !BiFunction<?, ?, ?> */ arg1) {
  return this.m_computeIfPresent__java_lang_Integer__java_util_function_BiFunction__java_lang_Number(/**@type {!Integer}*/ ($Casts.$to(arg0, Integer)), arg1);
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} */
 m_forEach__java_util_function_BiConsumer__void(/** !BiConsumer<?, ?> */ arg0) {
  Map.m_forEach__$default__java_util_Map__java_util_function_BiConsumer__void(this, arg0);
 }
 //Bridge method.
 /** @override @suppress{visibility} @return {!(Number|number|!$Long)} */
 getOrDefault(/** * */ arg0, /** !(Number|number|!$Long) */ arg1) {
  return /**@type {!(Number|number|!$Long)}*/ ($Casts.$to(Map.m_getOrDefault__$default__java_util_Map__java_lang_Object__java_lang_Object__java_lang_Object(this, arg0, /**@type {!(Number|number|!$Long)}*/ ($Casts.$to(arg1, Number))), Number));
 }
 //Bridge method.
 /** @final @override @nodts @suppress{visibility} @return {(Number|number|!$Long)} */
 m_merge__java_lang_Object__java_lang_Object__java_util_function_BiFunction__java_lang_Object(/** !Integer */ arg0, /** !(Number|number|!$Long) */ arg1, /** !BiFunction<?, ?, ?> */ arg2) {
  return this.m_merge__java_lang_Integer__java_lang_Number__java_util_function_BiFunction__java_lang_Number(/**@type {!Integer}*/ ($Casts.$to(arg0, Integer)), /**@type {!(Number|number|!$Long)}*/ ($Casts.$to(arg1, Number)), arg2);
 }
 //Bridge method.
 /** @override @suppress{visibility} @return {(Number|number|!$Long)} */
 put(/** !Integer */ arg0, /** !(Number|number|!$Long) */ arg1) {
  return this.m_put__int__java_lang_Number__java_lang_Number((/**@type {!Integer}*/ ($Casts.$to(arg0, Integer))).intValue(), /**@type {!(Number|number|!$Long)}*/ ($Casts.$to(arg1, Number)));
 }
 //Bridge method.
 /** @override @suppress{visibility} @return {(Number|number|!$Long)} */
 putIfAbsent(/** !Integer */ arg0, /** !(Number|number|!$Long) */ arg1) {
  return this.m_putIfAbsent__java_lang_Integer__java_lang_Number__java_lang_Number(/**@type {!Integer}*/ ($Casts.$to(arg0, Integer)), /**@type {!(Number|number|!$Long)}*/ ($Casts.$to(arg1, Number)));
 }
 //Bridge method.
 /** @override @suppress{visibility} @return {(Number|number|!$Long)} */
 replace(/** !Integer */ arg0, /** !(Number|number|!$Long) */ arg1) {
  return this.m_replace__java_lang_Integer__java_lang_Number__java_lang_Number(/**@type {!Integer}*/ ($Casts.$to(arg0, Integer)), /**@type {!(Number|number|!$Long)}*/ ($Casts.$to(arg1, Number)));
 }
 //Bridge method.
 /** @final @override @nodts @suppress{visibility} @return {boolean} */
 m_replace__java_lang_Object__java_lang_Object__java_lang_Object__boolean(/** !Integer */ arg0, /** !(Number|number|!$Long) */ arg1, /** !(Number|number|!$Long) */ arg2) {
  return this.m_replace__java_lang_Integer__java_lang_Number__java_lang_Number__boolean(/**@type {!Integer}*/ ($Casts.$to(arg0, Integer)), /**@type {!(Number|number|!$Long)}*/ ($Casts.$to(arg1, Number)), /**@type {!(Number|number|!$Long)}*/ ($Casts.$to(arg2, Number)));
 }
 //Default method forwarding stub.
 /** @nodts @suppress{visibility} @return {!(Number|number|!$Long)} */
 m_getOrDefault__java_lang_Object__java_lang_Number__java_lang_Number(/** * */ arg0, /** !(Number|number|!$Long) */ arg1) {
  return /**@type {!(Number|number|!$Long)}*/ ($Casts.$to(Map.m_getOrDefault__$default__java_util_Map__java_lang_Object__java_lang_Object__java_lang_Object(this, arg0, arg1), Number));
 }
 /** @nodts @return {!NumberByIntMap} */
 static get f_INSTANCE__primitivespecialization_NumberByIntMap() {
  return (NumberByIntMap.$clinit(), NumberByIntMap.$static_INSTANCE__primitivespecialization_NumberByIntMap);
 }
 /** @nodts */
 static $clinit() {
  NumberByIntMap.$clinit = () =>{};
  NumberByIntMap.$loadModules();
  j_l_Object.$clinit();
  Map.$clinit();
  NumberByIntMap.$static_INSTANCE__primitivespecialization_NumberByIntMap = NumberByIntMap.$create__();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof NumberByIntMap;
 }
 
 /** @nodts */
 static $loadModules() {
  Integer = goog.module.get('java.lang.Integer$impl');
  Number = goog.module.get('java.lang.Number$impl');
  RuntimeException = goog.module.get('java.lang.RuntimeException$impl');
  Intrinsics = goog.module.get('kotlin.jvm.internal.Intrinsics$impl');
  $Casts = goog.module.get('vmbootstrap.Casts$impl');
  $Exceptions = goog.module.get('vmbootstrap.Exceptions$impl');
 }
}
/**@private {!NumberByIntMap} @nodts*/
NumberByIntMap.$static_INSTANCE__primitivespecialization_NumberByIntMap;
Map.$markImplementor(NumberByIntMap);
$Util.$setClassMetadata(NumberByIntMap, 'primitivespecialization.NumberByIntMap');

exports = NumberByIntMap;

//# sourceMappingURL=NumberByIntMap.js.map
