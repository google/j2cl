// Generated from "implicitparenthesis/ImplicitParenthesis.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "INCOMPATIBLE_OBJC_NAME_OVERRIDE",
 "REDUNDANT_ELSE_IN_WHEN")

package implicitparenthesis

import javaemul.lang.*
import kotlin.Boolean
import kotlin.Int
import kotlin.Suppress
import kotlin.assert
import kotlin.jvm.JvmStatic
import kotlin.run

open class ImplicitParenthesis {
 open fun test() {
  ImplicitParenthesis.examples()
  ImplicitParenthesis.nonExamples()
 }

 companion object {
  @JvmStatic
  private fun examples() {
   var primitiveInt: Int = 0
   var boxedInt: Int? = null
   primitiveInt = 5
   boxedInt = Int(10)
   primitiveInt = (if (primitiveInt == 5) Int(15) else Int(30)).toInt()
   assert(primitiveInt == 15)
   primitiveInt = 5
   boxedInt = Int(10)
   primitiveInt = run {
    boxedInt = boxedInt!!.toInt() + primitiveInt
    boxedInt
   }!!.toInt()
   assert(primitiveInt == 15)
   primitiveInt = 5
   boxedInt = Int(10)
   primitiveInt = run {
    boxedInt = primitiveInt
    boxedInt
   }!!.toInt()
   assert(primitiveInt == 5)
   primitiveInt = 5
   boxedInt = Int(10)
   primitiveInt = run {
    val ___value: Int? = boxedInt
    boxedInt = boxedInt!!.toInt() + 1
    ___value
   }!!.toInt()
   assert(primitiveInt == 10)
   primitiveInt = 5
   boxedInt = Int(10)
   primitiveInt = run {
    boxedInt = boxedInt!!.toInt() + 1
    boxedInt
   }!!.toInt()
   assert(primitiveInt == 11)
  }

  @JvmStatic
  private fun nonExamples() {
   var primitiveInt: Int = 0
   var boxedInt: Int? = null
   var boxedBoolean: Boolean? = null
   primitiveInt = 5
   boxedInt = Int(10)
   primitiveInt = boxedInt!!.toInt() - primitiveInt
   assert(primitiveInt == 5)
   primitiveInt = 5
   boxedInt = Int(10)
   boxedBoolean = true
   boxedBoolean = boxedInt!!.toInt() == primitiveInt
   assert(boxedBoolean!!.booleanValue() == false)
  }

  @JvmStatic
  private fun parenthesisRemoval() {
   Int(
    1 + 2,
   )
  }
 }
}
