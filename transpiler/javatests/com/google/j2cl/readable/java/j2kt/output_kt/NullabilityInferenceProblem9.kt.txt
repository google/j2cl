// Generated from "j2kt/NullabilityInferenceProblem9.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "INCOMPATIBLE_OBJC_NAME_OVERRIDE",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import java.lang.RuntimeException
import kotlin.Suppress
import kotlin.jvm.JvmStatic

open class NullabilityInferenceProblem9 {
 companion object {
  @JvmStatic
  internal fun <V> future_pp_j2kt(v: V): Future<V> {
   throw RuntimeException()
  }

  @JvmStatic
  internal fun <I, O> transformFuture_pp_j2kt(future: Future<I>, fn: FutureFunction<in I, out O>): Future<O> {
   throw RuntimeException()
  }

  @JvmStatic
  internal fun test_pp_j2kt(nullableFooFuture: Future<Foo?>, fooFuture: Future<Foo>): Future<Foo> {
   return NullabilityInferenceProblem9.transformFuture_pp_j2kt<Foo?, Foo?>(
    nullableFooFuture,
    FutureFunction { nullableFoo: Foo? ->
     if (nullableFoo != null) {
      return@FutureFunction NullabilityInferenceProblem9.future_pp_j2kt<Foo?>(nullableFoo)
     }
     return@FutureFunction fooFuture as Future<Foo?>
    },
   ) as Future<Foo>
  }
 }

 interface Foo

 interface Future<V>

 fun interface FutureFunction<I, O> {
  fun apply(i: I): Future<O>
 }
}
