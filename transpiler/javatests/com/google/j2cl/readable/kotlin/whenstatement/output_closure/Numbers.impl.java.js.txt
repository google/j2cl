goog.module('whenstatement.Numbers$impl');

const Enum = goog.require('java.lang.Enum$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $Equality = goog.forwardDeclare('nativebootstrap.Equality$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Enums = goog.forwardDeclare('vmbootstrap.Enums$impl');

/**
 * @final
 * @extends {Enum<!Numbers>}
 */
class Numbers extends Enum {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {!Numbers} */
 static $create__java_lang_String__int(/** ?string */ $name, /** number */ $ordinal) {
  let $instance = new Numbers();
  $instance.$ctor__whenstatement_Numbers__java_lang_String__int__void($name, $ordinal);
  return $instance;
 }
 /** @nodts */
 $ctor__whenstatement_Numbers__java_lang_String__int__void(/** ?string */ $name, /** number */ $ordinal) {
  this.f_name__java_lang_Enum_ = $name;
  this.f_ordinal__java_lang_Enum_ = $ordinal;
  this.$ctor__java_lang_Enum__java_lang_String__int__void($name, $ordinal);
 }
 /** @nodts @return {!Numbers} */
 static m_valueOf__java_lang_String__whenstatement_Numbers(/** string */ name) {
  Numbers.$clinit();
  if ($Equality.$same(Numbers.f_namesToValuesMap__whenstatement_Numbers_, null)) {
   Numbers.f_namesToValuesMap__whenstatement_Numbers_ = (/**@type {Map<?string, !Numbers>}*/ ($Enums.createMapFromValues(Numbers.m_values__arrayOf_whenstatement_Numbers())));
  }
  return /**@type {Numbers}*/ ($Enums.getValueFromNameAndMap(name, Numbers.f_namesToValuesMap__whenstatement_Numbers_));
 }
 /** @nodts @return {!Array<!Numbers>} */
 static m_values__arrayOf_whenstatement_Numbers() {
  Numbers.$clinit();
  return /**@type {!Array<!Numbers>}*/ ($Arrays.$stampType([Numbers.f_ONE__whenstatement_Numbers, Numbers.f_TWO__whenstatement_Numbers, Numbers.f_THREE__whenstatement_Numbers], Numbers));
 }
 /** @nodts */
 static $clinit() {
  Numbers.$clinit = () =>{};
  Numbers.$loadModules();
  Enum.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof Numbers;
 }
 
 /** @nodts */
 static $loadModules() {
  $Equality = goog.module.get('nativebootstrap.Equality$impl');
  $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
  $Enums = goog.module.get('vmbootstrap.Enums$impl');
 }
}
/**@const {number} @nodts*/
Numbers.$ordinal_ONE__whenstatement_Numbers = 0;
/**@const {number} @nodts*/
Numbers.$ordinal_TWO__whenstatement_Numbers = 1;
/**@const {number} @nodts*/
Numbers.$ordinal_THREE__whenstatement_Numbers = 2;
/**@const {!Numbers} @nodts*/
Numbers.f_ONE__whenstatement_Numbers = /**@pureOrBreakMyCode*/ Numbers.$create__java_lang_String__int($Util.$makeEnumName('ONE'), Numbers.$ordinal_ONE__whenstatement_Numbers);
/**@const {!Numbers} @nodts*/
Numbers.f_TWO__whenstatement_Numbers = /**@pureOrBreakMyCode*/ Numbers.$create__java_lang_String__int($Util.$makeEnumName('TWO'), Numbers.$ordinal_TWO__whenstatement_Numbers);
/**@const {!Numbers} @nodts*/
Numbers.f_THREE__whenstatement_Numbers = /**@pureOrBreakMyCode*/ Numbers.$create__java_lang_String__int($Util.$makeEnumName('THREE'), Numbers.$ordinal_THREE__whenstatement_Numbers);
/**@type {Map<?string, !Numbers>} @nodts*/
Numbers.f_namesToValuesMap__whenstatement_Numbers_;
$Util.$setClassMetadataForEnum(Numbers, 'whenstatement.Numbers');

exports = Numbers;

//# sourceMappingURL=Numbers.js.map
