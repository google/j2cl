goog.module('abstractinnerclass.InnerClasses.B$impl');

const A = goog.require('abstractinnerclass.InnerClasses.A$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

/**
 * @abstract
 * @implements {A}
 */
class B extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts */
 $ctor__abstractinnerclass_InnerClasses_B__void() {
  this.$ctor__java_lang_Object__void();
 }
 /** @final @nodts */
 m_bar__void() {
  this.m_foo__void();
 }
 /** @nodts */
 static $clinit() {
  B.$clinit = () =>{};
  B.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof B;
 }
 /** @abstract @override @nodts @suppress{visibility} */
 m_foo__void() {}
 
 /** @nodts */
 static $loadModules() {}
}
A.$markImplementor(B);
$Util.$setClassMetadata(B, 'abstractinnerclass.InnerClasses$B');

exports = B;

//# sourceMappingURL=InnerClasses$B.js.map
