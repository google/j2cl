goog.module('readonlycollections.SetImpl$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const Set = goog.require('java.util.Set$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Iterable = goog.forwardDeclare('java.lang.Iterable$impl');
let RuntimeException = goog.forwardDeclare('java.lang.RuntimeException$impl');
let Collection = goog.forwardDeclare('java.util.Collection$impl');
let Iterator = goog.forwardDeclare('java.util.Iterator$impl');
let Spliterator = goog.forwardDeclare('java.util.Spliterator$impl');
let Consumer = goog.forwardDeclare('java.util.function.Consumer$impl');
let Predicate = goog.forwardDeclare('java.util.function.Predicate$impl');
let Stream = goog.forwardDeclare('java.util.stream.Stream$impl');
let Intrinsics = goog.forwardDeclare('kotlin.jvm.internal.Intrinsics$impl');
let $Exceptions = goog.forwardDeclare('vmbootstrap.Exceptions$impl');

/**
 * @final
 * @template T
 * @implements {Set<T>}
 */
class SetImpl extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @template T @return {!SetImpl<T>} */
 static $create__() {
  SetImpl.$clinit();
  let $instance = new SetImpl();
  $instance.$ctor__readonlycollections_SetImpl__void();
  return $instance;
 }
 /** @nodts */
 $ctor__readonlycollections_SetImpl__void() {
  this.$ctor__java_lang_Object__void();
 }
 /** @nodts @return {number} */
 m_getSize__int() {
  throw $Exceptions.toJs(RuntimeException.$create__java_lang_String('not implemented'));
 }
 /** @override @return {boolean} */
 contains(/** T */ element) {
  throw $Exceptions.toJs(RuntimeException.$create__java_lang_String('not implemented'));
 }
 /** @override @return {boolean} */
 containsAll(/** !Collection<?> */ elements) {
  throw $Exceptions.toJs(RuntimeException.$create__java_lang_String('not implemented'));
 }
 /** @override @return {boolean} */
 isEmpty() {
  throw $Exceptions.toJs(RuntimeException.$create__java_lang_String('not implemented'));
 }
 /** @override @nodts @return {!Iterator<?>} */
 m_iterator__java_util_Iterator() {
  throw $Exceptions.toJs(RuntimeException.$create__java_lang_String('not implemented'));
 }
 /** @override @return {boolean} */
 add(/** T */ element) {
  return Intrinsics.m_throwUnsupportedOperationException__java_lang_String__kotlin_jvm_internal_NothingStub('Operation is not supported for read-only collection');
 }
 /** @override @return {boolean} */
 remove(/** * */ element) {
  return Intrinsics.m_throwUnsupportedOperationException__java_lang_String__kotlin_jvm_internal_NothingStub('Operation is not supported for read-only collection');
 }
 /** @override @return {boolean} */
 addAll(/** !Collection<?> */ elements) {
  return Intrinsics.m_throwUnsupportedOperationException__java_lang_String__kotlin_jvm_internal_NothingStub('Operation is not supported for read-only collection');
 }
 /** @override @return {boolean} */
 removeAll(/** !Collection<?> */ elements) {
  return Intrinsics.m_throwUnsupportedOperationException__java_lang_String__kotlin_jvm_internal_NothingStub('Operation is not supported for read-only collection');
 }
 /** @override @return {boolean} */
 retainAll(/** !Collection<?> */ elements) {
  return Intrinsics.m_throwUnsupportedOperationException__java_lang_String__kotlin_jvm_internal_NothingStub('Operation is not supported for read-only collection');
 }
 /** @override */
 clear() {
  Intrinsics.m_throwUnsupportedOperationException__java_lang_String__kotlin_jvm_internal_NothingStub('Operation is not supported for read-only collection');
 }
 /** @override @nodts @return {boolean} */
 m_removeIf__java_util_function_Predicate__boolean(/** !Predicate<?> */ filter) {
  return Intrinsics.m_throwUnsupportedOperationException__java_lang_String__kotlin_jvm_internal_NothingStub('Operation is not supported for read-only collection');
 }
 /** @final @override @return {number} */
 size() {
  return this.m_getSize__int();
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} */
 m_forEach__java_util_function_Consumer__void(/** Consumer<?> */ arg0) {
  Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer__void(this, arg0);
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} @return {!Spliterator<T>} */
 m_spliterator__java_util_Spliterator() {
  return /**@type {!Spliterator<T>}*/ (Set.m_spliterator__$default__java_util_Set__java_util_Spliterator(this));
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} @return {!Stream<T>} */
 m_parallelStream__java_util_stream_Stream() {
  return /**@type {!Stream<T>}*/ (Collection.m_parallelStream__$default__java_util_Collection__java_util_stream_Stream(this));
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} @return {!Stream<T>} */
 m_stream__java_util_stream_Stream() {
  return /**@type {!Stream<T>}*/ (Collection.m_stream__$default__java_util_Collection__java_util_stream_Stream(this));
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} @return {Array<*>} */
 m_toArray__arrayOf_java_lang_Object() {
  return Collection.m_toArray__$default__java_util_Collection__arrayOf_java_lang_Object(this);
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} @template T_1 @return {Array<T_1>} */
 m_toArray__arrayOf_java_lang_Object__arrayOf_java_lang_Object(/** Array<T_1> */ arg0) {
  return Collection.m_toArray__$default__java_util_Collection__arrayOf_java_lang_Object__arrayOf_java_lang_Object(this, arg0);
 }
 //Default method forwarding stub.
 /** @override @suppress{visibility} @return {Array<T>} */
 toArray() {
  return Collection.m__private_jsToArray____$default__java_util_Collection__arrayOf_java_lang_Object(this);
 }
 /** @nodts */
 static $clinit() {
  SetImpl.$clinit = () =>{};
  SetImpl.$loadModules();
  j_l_Object.$clinit();
  Set.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof SetImpl;
 }
 
 /** @nodts */
 static $loadModules() {
  Iterable = goog.module.get('java.lang.Iterable$impl');
  RuntimeException = goog.module.get('java.lang.RuntimeException$impl');
  Collection = goog.module.get('java.util.Collection$impl');
  Intrinsics = goog.module.get('kotlin.jvm.internal.Intrinsics$impl');
  $Exceptions = goog.module.get('vmbootstrap.Exceptions$impl');
 }
}
Set.$markImplementor(SetImpl);
$Util.$setClassMetadata(SetImpl, 'readonlycollections.SetImpl');

exports = SetImpl;

//# sourceMappingURL=SetImpl.js.map
