goog.module('lambdas.Lambdas.BiFunction$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('lambdas.Lambdas.BiFunction.$LambdaAdaptor$impl');
let Lambdas_Function = goog.forwardDeclare('lambdas.Lambdas.Function$impl');

/**
 * @interface
 * @template T, U, R
 */
class BiFunction {
 /** @abstract @nodts @return {R} */
 m_apply__java_lang_Object__java_lang_Object__java_lang_Object(/** T */ t, /** U */ u) {}
 /** @abstract @nodts @template V @return {!BiFunction<T, U, V>} */
 m_andThen__lambdas_Lambdas_Function__lambdas_Lambdas_BiFunction(/** !Lambdas_Function<?, ?> */ after) {}
 /** @nodts @template T, U, R @return {!BiFunction<T, U, R>} */
 static $adapt(/** ?function(T, U):R */ fn) {
  BiFunction.$clinit();
  return /**@type {!$LambdaAdaptor<T, U, R>}*/ (new $LambdaAdaptor(fn));
 }
 /** @nodts @template T, U, R, V @return {!BiFunction<T, U, V>} */
 static m_andThen__$default__lambdas_Lambdas_BiFunction__lambdas_Lambdas_Function__lambdas_Lambdas_BiFunction(/** !BiFunction<T, U, R> */ $thisArg, /** !Lambdas_Function<?, ?> */ after) {
  BiFunction.$clinit();
  return BiFunction.$adapt(/**  @return {V}*/ ((/** T */ t, /** U */ u) =>{
   return after.m_apply__java_lang_Object__java_lang_Object($thisArg.m_apply__java_lang_Object__java_lang_Object__java_lang_Object(t, u));
  }));
 }
 /** @nodts */
 static $clinit() {
  BiFunction.$clinit = () =>{};
  BiFunction.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  ctor.prototype.$implements__lambdas_Lambdas_BiFunction = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__lambdas_Lambdas_BiFunction;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('lambdas.Lambdas.BiFunction.$LambdaAdaptor$impl');
 }
}
BiFunction.$markImplementor(/**@type {Function}*/ (BiFunction));
$Util.$setClassMetadataForInterface(/**@type {Function}*/ (BiFunction), 'lambdas.Lambdas$BiFunction');

exports = BiFunction;

//# sourceMappingURL=Lambdas$BiFunction.js.map
