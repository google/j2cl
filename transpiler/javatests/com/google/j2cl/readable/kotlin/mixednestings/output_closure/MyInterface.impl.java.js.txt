goog.module('mixednestings.MyInterface$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('mixednestings.MyInterface.$LambdaAdaptor$impl');

/**
 * @interface
 */
class MyInterface {
 /** @abstract @nodts @return {number} */
 m_func__int__int(/** number */ a) {}
 /** @nodts @return {!MyInterface} */
 static $adapt(/** ?function(number):number */ fn) {
  MyInterface.$clinit();
  return new $LambdaAdaptor(fn);
 }
 /** @nodts */
 static $clinit() {
  MyInterface.$clinit = () =>{};
  MyInterface.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  ctor.prototype.$implements__mixednestings_MyInterface = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__mixednestings_MyInterface;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('mixednestings.MyInterface.$LambdaAdaptor$impl');
 }
}
MyInterface.$markImplementor(/**@type {Function}*/ (MyInterface));
$Util.$setClassMetadataForInterface(/**@type {Function}*/ (MyInterface), 'mixednestings.MyInterface');

exports = MyInterface;

//# sourceMappingURL=MyInterface.js.map
