// Generated from "j2ktjavac/MethodReferences.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "INCOMPATIBLE_OBJC_NAME_OVERRIDE",
 "REDUNDANT_ELSE_IN_WHEN")

package j2ktjavac

import javaemul.lang.*
import java.lang.RuntimeException
import kotlin.Any
import kotlin.Suppress
import kotlin.jvm.JvmStatic

open class MethodReferences {
 companion object {
  @JvmStatic
  fun <T> testImplicitTypeArguments(): BiConsumer<Consumer<T>, T> {
   return MethodReferences.apply<Consumer<T>, T>(
    BiConsumer { arg0: Consumer<T>, arg1: T ->
     arg0.accept(arg1)
    },
   )
  }

  @JvmStatic
  fun <T> testExplicitTypeArguments(): BiConsumer<Consumer<T>, T> {
   return MethodReferences.apply<Consumer<T>, T>(
    BiConsumer { arg0: Consumer<T>, arg1: T ->
     arg0.accept(arg1)
    },
   )
  }

  @JvmStatic
  fun <A, B> apply(biConsumer: BiConsumer<A, B>): BiConsumer<A, B> {
   throw RuntimeException()
  }

  @JvmStatic
  internal fun testMemberReferenceParameterNullabilty_pp_j2ktjavac() {
   val consumerFn: Consumer<Container<Any>>? = null
   val container: Container<Container<Any>>? = null
   container!!.apply(
    Consumer { arg0: Container<Any> ->
     consumerFn!!.accept(arg0)
    },
   )
  }
 }

 fun interface Consumer<A> {
  fun accept(a: A)
 }

 fun interface BiConsumer<A, B> {
  fun accept(a: A, b: B)
 }

 open class Container<V> internal constructor() {
  open fun apply(callback: Consumer<V>) {}
 }
}
