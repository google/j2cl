// Generated from "jstypecastsinstanceof/CastToNativeType.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "INCOMPATIBLE_OBJC_NAME_OVERRIDE",
 "REDUNDANT_ELSE_IN_WHEN")

package jstypecastsinstanceof

import javaemul.lang.*
import jsinterop.annotations.JsPackage
import jsinterop.annotations.JsType
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.String
import kotlin.Suppress

open class CastToNativeType {
 open fun test() {
  val a: Any = NativeJsType()
  val b: NativeJsType? = a as NativeJsType?
  var c: Boolean = a is NativeJsType
  val d: Array<NativeJsType?>? = a as Array<NativeJsType?>?
  c = a is Array<*>
  val e: NativeObject<Any?, Any?>? = a as NativeObject<Any?, Any?>?
  val f: NativeObject<String?, Any?>? = a as NativeObject<String?, Any?>?
  c = a is NativeObject<*, *>
  val g: Array<NativeObject<Any?, Any?>?>? = a as Array<NativeObject<Any?, Any?>?>?
  val h: Array<NativeObject<String?, Any?>?>? = a as Array<NativeObject<String?, Any?>?>?
  c = a is Array<*>
 }

 @JsType(namespace = "test.foo", isNative = true)
 open class NativeJsType

 @JsType(name = "Object", namespace = JsPackage.GLOBAL, isNative = true)
 open class NativeObject<K, V>
}
