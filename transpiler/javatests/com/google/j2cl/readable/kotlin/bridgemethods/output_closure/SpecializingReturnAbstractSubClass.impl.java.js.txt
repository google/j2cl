goog.module('bridgemethods.SpecializingReturnAbstractSubClass$impl');

const SpecializingReturnAbstractClass = goog.require('bridgemethods.SpecializingReturnAbstractClass$impl');
const SpecializingReturnInterface = goog.require('bridgemethods.SpecializingReturnInterface$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

/**
 * @abstract
 * @implements {SpecializingReturnInterface}
 */
class SpecializingReturnAbstractSubClass extends SpecializingReturnAbstractClass {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts */
 $ctor__bridgemethods_SpecializingReturnAbstractSubClass__void() {
  this.$ctor__bridgemethods_SpecializingReturnAbstractClass__void();
 }
 //Bridge method.
 /** @final @override @nodts @suppress{visibility} @return {?string} */
 m_foo__java_lang_Object() {
  return this.m_foo__java_lang_String();
 }
 /** @nodts */
 static $clinit() {
  SpecializingReturnAbstractSubClass.$clinit = () =>{};
  SpecializingReturnAbstractSubClass.$loadModules();
  SpecializingReturnAbstractClass.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof SpecializingReturnAbstractSubClass;
 }
 /** @abstract @override @nodts @suppress{visibility} @return {?string} */
 m_foo__java_lang_String() {}
 
 /** @nodts */
 static $loadModules() {}
}
SpecializingReturnInterface.$markImplementor(SpecializingReturnAbstractSubClass);
$Util.$setClassMetadata(SpecializingReturnAbstractSubClass, 'bridgemethods.SpecializingReturnAbstractSubClass');

exports = SpecializingReturnAbstractSubClass;

//# sourceMappingURL=SpecializingReturnAbstractSubClass.js.map
