goog.module('bridgemethods.B$impl');

const A = goog.require('bridgemethods.A$impl');
const I = goog.require('bridgemethods.I$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let Number = goog.forwardDeclare('java.lang.Number$impl');
let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let $Long = goog.forwardDeclare('nativebootstrap.Long$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @final
 * @extends {A<(Number|number|!$Long), ?string>}
 * @implements {I<Integer, ?string>}
 */
class B extends A {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {!B} */
 static $create__() {
  B.$clinit();
  let $instance = new B();
  $instance.$ctor__bridgemethods_B__void();
  return $instance;
 }
 /** @nodts */
 $ctor__bridgemethods_B__void() {
  this.$ctor__bridgemethods_A__void();
 }
 /** @nodts @return {Integer} */
 m_fun__java_lang_String__java_lang_Integer(/** ?string */ s) {
  return Integer.valueOf(1);
 }
 //Bridge method.
 /** @final @override @nodts @suppress{visibility} @return {Integer} */
 m_fun__java_lang_Object__java_lang_Object(/** ?string */ arg0) {
  return this.m_fun__java_lang_String__java_lang_Integer(/**@type {?string}*/ ($Casts.$to(arg0, j_l_String)));
 }
 /** @nodts */
 static $clinit() {
  B.$clinit = () =>{};
  B.$loadModules();
  A.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof B;
 }
 
 /** @nodts */
 static $loadModules() {
  Integer = goog.module.get('java.lang.Integer$impl');
  j_l_String = goog.module.get('java.lang.String$impl');
  $Casts = goog.module.get('vmbootstrap.Casts$impl');
 }
}
I.$markImplementor(B);
$Util.$setClassMetadata(B, 'bridgemethods.B');

exports = B;

//# sourceMappingURL=B.js.map
