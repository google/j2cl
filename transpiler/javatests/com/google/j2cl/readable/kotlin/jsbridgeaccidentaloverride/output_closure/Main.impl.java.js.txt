goog.module('jsbridgeaccidentaloverride.Main$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let MyJsType = goog.forwardDeclare('jsbridgeaccidentaloverride.MyJsType$impl');
let SubJsType = goog.forwardDeclare('jsbridgeaccidentaloverride.SubJsType$impl');

/**
 * @final
 */
class Main extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {!Main} */
 static $create__() {
  Main.$clinit();
  let $instance = new Main();
  $instance.$ctor__jsbridgeaccidentaloverride_Main__void();
  return $instance;
 }
 /** @nodts */
 $ctor__jsbridgeaccidentaloverride_Main__void() {
  this.$ctor__java_lang_Object__void();
 }
 /** @final @nodts */
 m_test__void() {
  let a = MyJsType.$create__();
  let b = SubJsType.$create__();
  let c = SubJsType.$create__();
  let d = SubJsType.$create__();
  a.foo(1);
  b.foo(1);
  c.m_foo__int__int(1);
  a.bar(1);
  b.bar(1);
  c.m_bar__int__int(1);
  a.f(1);
  b.f(1);
  d.m_f__int__int(1);
 }
 /** @nodts */
 static $clinit() {
  Main.$clinit = () =>{};
  Main.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof Main;
 }
 
 /** @nodts */
 static $loadModules() {
  MyJsType = goog.module.get('jsbridgeaccidentaloverride.MyJsType$impl');
  SubJsType = goog.module.get('jsbridgeaccidentaloverride.SubJsType$impl');
 }
}
$Util.$setClassMetadata(Main, 'jsbridgeaccidentaloverride.Main');

exports = Main;

//# sourceMappingURL=Main.js.map
