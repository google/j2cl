goog.module('bridgejsmethod.Main.Q$impl');

const P = goog.require('bridgejsmethod.Main.P$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Main = goog.forwardDeclare('bridgejsmethod.Main$impl');

/**
 * @abstract
 * @implements {P}
 */
class Q extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
  /**@type {!Main} @nodts*/
  this.$outer_this__bridgejsmethod_Main_Q;
 }
 /** @nodts */
 $ctor__bridgejsmethod_Main_Q__bridgejsmethod_Main__void(/** !Main */ $outer_this) {
  this.$outer_this__bridgejsmethod_Main_Q = $outer_this;
  this.$ctor__java_lang_Object__void();
 }
 /** @abstract @return {string} */
 get key() {}
 //Bridge method.
 /** @final @override @nodts @suppress{visibility} @return {string} */
 m_getKey__java_lang_String() {
  return this.key;
 }
 /** @nodts */
 static $clinit() {
  Q.$clinit = () =>{};
  Q.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof Q;
 }
 
 /** @nodts */
 static $loadModules() {}
}
P.$markImplementor(Q);
$Util.$setClassMetadata(Q, 'bridgejsmethod.Main$Q');

exports = Q;

//# sourceMappingURL=Main$Q.js.map
