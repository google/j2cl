goog.module('lambdas.Lambdas.Function$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('lambdas.Lambdas.Function.$LambdaAdaptor$impl');

/**
 * @interface
 * @template T, R
 */
class Lambdas_Function {
 /** @nodts @template T_1 @return {Lambdas_Function<T_1, T_1>} */
 static m_identity__lambdas_Lambdas_Function() {
  Lambdas_Function.$clinit();
  return Lambdas_Function.$adapt(/**  @return {T_1}*/ ((/** T_1 */ t) =>{
   return t;
  }));
 }
 /** @abstract @nodts @return {R} */
 m_apply__java_lang_Object__java_lang_Object(/** T */ t) {}
 /** @nodts @template T, R @return {!Lambdas_Function<T, R>} */
 static $adapt(/** ?function(T):R */ fn) {
  Lambdas_Function.$clinit();
  return /**@type {!$LambdaAdaptor<T, R>}*/ (new $LambdaAdaptor(fn));
 }
 /** @nodts */
 static $clinit() {
  Lambdas_Function.$clinit = () =>{};
  Lambdas_Function.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  ctor.prototype.$implements__lambdas_Lambdas_Function = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__lambdas_Lambdas_Function;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('lambdas.Lambdas.Function.$LambdaAdaptor$impl');
 }
}
Lambdas_Function.$markImplementor(/**@type {Function}*/ (Lambdas_Function));
$Util.$setClassMetadataForInterface(/**@type {Function}*/ (Lambdas_Function), 'lambdas.Lambdas$Function');

exports = Lambdas_Function;

//# sourceMappingURL=Lambdas$Function.js.map
