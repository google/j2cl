goog.module('functiontype.IntTransformer$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const Function1 = goog.require('kotlin.jvm.functions.Function1$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @final
 * @implements {Function1<!Integer, !Integer>}
 */
class IntTransformer extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {!IntTransformer} */
 static $create__() {
  IntTransformer.$clinit();
  let $instance = new IntTransformer();
  $instance.$ctor__functiontype_IntTransformer__void();
  return $instance;
 }
 /** @nodts */
 $ctor__functiontype_IntTransformer__void() {
  this.$ctor__java_lang_Object__void();
 }
 /** @nodts @return {number} */
 m_invoke__int__int(/** number */ x) {
  return 1;
 }
 //Bridge method.
 /** @final @override @nodts @suppress{visibility} @return {!Integer} */
 m_invoke__java_lang_Object__java_lang_Object(/** !Integer */ arg0) {
  return Integer.valueOf(this.m_invoke__int__int((/**@type {!Integer}*/ ($Casts.$to(arg0, Integer))).intValue()));
 }
 /** @nodts */
 static $clinit() {
  IntTransformer.$clinit = () =>{};
  IntTransformer.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof IntTransformer;
 }
 
 /** @nodts */
 static $loadModules() {
  Integer = goog.module.get('java.lang.Integer$impl');
  $Casts = goog.module.get('vmbootstrap.Casts$impl');
 }
}
Function1.$markImplementor(IntTransformer);
$Util.$setClassMetadata(IntTransformer, 'functiontype.IntTransformer');

exports = IntTransformer;

//# sourceMappingURL=IntTransformer.js.map
