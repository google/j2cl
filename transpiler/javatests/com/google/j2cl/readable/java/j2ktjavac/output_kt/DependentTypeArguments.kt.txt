// Generated from "j2ktjavac/DependentTypeArguments.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2ktjavac

import javaemul.lang.*
import java.lang.RuntimeException
import kotlin.Any
import kotlin.Suppress
import kotlin.jvm.JvmStatic

open class DependentTypeArguments {
 companion object {
  @JvmStatic
  fun <TestK, TestV, TestF: Function<TestK, TestV>> testImplicitTypeArguments(function: TestF, mergeFunction: BiFunction<TestV, TestV, TestV>): Collector<*, TestF> {
   return Collector.of<TestF>(
    function,
    BiFunction { m1: TestF, m2: TestF ->
     return@BiFunction DependentTypeArguments.mergeAll<Any?, TestV, TestF>(m1, m2, mergeFunction)
    },
   )
  }

  @JvmStatic
  fun <TestK, TestV, TestF: Function<TestK, TestV>> testExplicitTypeArguments(function: TestF, mergeFunction: BiFunction<TestV, TestV, TestV>): Collector<*, TestF> {
   return Collector.of<TestF>(
    function,
    BiFunction { m1: TestF, m2: TestF ->
     return@BiFunction DependentTypeArguments.mergeAll<TestK, TestV, TestF>(m1, m2, mergeFunction)
    },
   )
  }

  @JvmStatic
  private fun <MergeK, MergeV, MergeF: Function<MergeK, MergeV>> mergeAll(m1: MergeF, m2: MergeF, mergeFunction: BiFunction<MergeV, MergeV, MergeV>): MergeF {
   throw RuntimeException()
  }
 }

 fun interface Function<FunIn, FunOut> {
  fun apply(`in`: FunIn): FunOut
 }

 fun interface BiFunction<BiIn1, BiIn2, BiOut> {
  fun apply(in1: BiIn1, in2: BiIn2): BiOut
 }

 interface Collector<CollAcum, CollRes> {
  companion object {
   @JvmStatic
   fun <OfRes> of(supplier: OfRes, combiner: BiFunction<OfRes, OfRes, OfRes>): Collector<OfRes, OfRes> {
    throw RuntimeException()
   }
  }
 }
}
