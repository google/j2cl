goog.module('simplebridgemethods.Subclass$impl');

const $Util = goog.require('nativebootstrap.Util$impl');
const Superclass = goog.require('simplebridgemethods.Superclass$impl');

let AssertionError = goog.forwardDeclare('java.lang.AssertionError$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @final
 * @extends {Superclass<!AssertionError>}
 */
class Subclass extends Superclass {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {!Subclass} */
 static $create__() {
  Subclass.$clinit();
  let $instance = new Subclass();
  $instance.$ctor__simplebridgemethods_Subclass__void();
  return $instance;
 }
 /** @nodts */
 $ctor__simplebridgemethods_Subclass__void() {
  this.$ctor__simplebridgemethods_Superclass__void();
 }
 /** @nodts */
 m_m1__java_lang_AssertionError__void(/** !AssertionError */ a) {}
 //Bridge method.
 /** @final @override @nodts @suppress{visibility} */
 m_m1__java_lang_Error__void(/** !AssertionError */ arg0) {
  this.m_m1__java_lang_AssertionError__void(/**@type {!AssertionError}*/ ($Casts.$to(arg0, AssertionError)));
 }
 /** @nodts */
 static $clinit() {
  Subclass.$clinit = () =>{};
  Subclass.$loadModules();
  Superclass.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof Subclass;
 }
 
 /** @nodts */
 static $loadModules() {
  AssertionError = goog.module.get('java.lang.AssertionError$impl');
  $Casts = goog.module.get('vmbootstrap.Casts$impl');
 }
}
$Util.$setClassMetadata(Subclass, 'simplebridgemethods.Subclass');

exports = Subclass;

//# sourceMappingURL=Subclass.js.map
