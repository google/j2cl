// Generated from "simplebridgemethods/SimpleBridgeMethods.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "INCOMPATIBLE_OBJC_NAME_OVERRIDE",
 "REDUNDANT_ELSE_IN_WHEN")

package simplebridgemethods

import javaemul.lang.*
import kotlin.AssertionError
import kotlin.Error
import kotlin.Suppress

open class Superclass<T: Error?> internal constructor() {
 open fun m1(t: T) {}
}

open class Subclass internal constructor(): Superclass<AssertionError?>() {
 override fun m1(a: AssertionError?) {}
}

open class AnotherSubclass internal constructor(): Superclass<AssertionError?>()

fun interface Callable<V> {
 fun call(v: V)
}

open class Task<T> internal constructor(): Callable<T> {
 override fun call(t: T) {}
}

open class AnotherTask<T: AssertionError?> internal constructor(): Callable<Superclass<T>?> {
 override fun call(t: Superclass<T>?) {}
}

open class SimpleBridgeMethods
