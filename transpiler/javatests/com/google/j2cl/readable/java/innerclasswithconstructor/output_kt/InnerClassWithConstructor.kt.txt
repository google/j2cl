// Generated from "innerclasswithconstructor/InnerClassWithConstructor.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package innerclasswithconstructor

import javaemul.lang.*
import kotlin.Int
import kotlin.Suppress
import kotlin.jvm.JvmField

open class InnerClassWithConstructor {
 @JvmField
 var a: Int = 0

 open inner class InnerClass {
  @JvmField
  var b: Int = 0

  constructor(b: Int) {
   this.b = this@InnerClassWithConstructor.a + b
  }

  constructor(): this(
   this@InnerClassWithConstructor.a,
  )
 }

 open inner class InnerClassWithSingleConstructor constructor(b: Int) {
  @JvmField
  var b: Int = 0

  init {
   this.b = this@InnerClassWithConstructor.a + b
  }
 }

 open inner class InnerClassWithFieldAfterConstructor constructor(i: Int) {
  private val i: Int

  init {
   this.i = i
  }
 }
}
