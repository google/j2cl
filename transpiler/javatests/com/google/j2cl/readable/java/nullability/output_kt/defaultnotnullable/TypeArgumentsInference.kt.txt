// Generated from "nullability/defaultnotnullable/TypeArgumentsInference.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "INCOMPATIBLE_OBJC_NAME_OVERRIDE",
 "REDUNDANT_ELSE_IN_WHEN")

package nullability.defaultnotnullable

import javaemul.lang.*
import kotlin.Any
import kotlin.Suppress
import kotlin.jvm.JvmStatic

open class TypeArgumentsInference {
 companion object {
  @JvmStatic
  fun <K> wildcardPair(): Pair<K, *> {
   return Pair<K, Any>()
  }

  @JvmStatic
  fun <K, V> pairIdentity(pair: Pair<K, V>): Pair<K, V> {
   return pair
  }

  @JvmStatic
  fun <K> wildcardPairAndIdentity(): Pair<K, *> {
   return TypeArgumentsInference.pairIdentity<K, Any?>(
    TypeArgumentsInference.wildcardPair<K>() as Pair<K, Any?>,
   )
  }
 }

 class Pair<K, V>
}
