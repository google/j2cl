// Generated from "jsdoctypemappings/JsDocTypeMappings.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package jsdoctypemappings

import javaemul.lang.*
import jsinterop.annotations.JsFunction
import jsinterop.annotations.JsPackage
import jsinterop.annotations.JsType
import kotlin.Any
import kotlin.Boolean
import kotlin.Byte
import kotlin.Char
import kotlin.Comparable
import kotlin.Comparator
import kotlin.Double
import kotlin.Float
import kotlin.Int
import kotlin.Long
import kotlin.Short
import kotlin.String
import kotlin.Suppress

open class JsDocTypeMappings {
 internal open fun returnComparatorWildcard_pp_jsdoctypemappings(): Comparator<*>? {
  return null
 }

 internal open fun returnComparable_pp_jsdoctypemappings(): Comparable<Any>? {
  return null
 }

 internal open fun returnJavaLangString_pp_jsdoctypemappings(): String? {
  return null
 }

 internal open fun returnJavaLangObject_pp_jsdoctypemappings(): Any? {
  return null
 }

 internal open fun returnJavaLangByte_pp_jsdoctypemappings(): Byte? {
  return null
 }

 internal open fun returnJavaLangShort_pp_jsdoctypemappings(): Short? {
  return null
 }

 internal open fun returnJavaLangInteger_pp_jsdoctypemappings(): Int? {
  return null
 }

 internal open fun returnJavaLangLong_pp_jsdoctypemappings(): Long? {
  return null
 }

 internal open fun returnJavaLangFloat_pp_jsdoctypemappings(): Float? {
  return null
 }

 internal open fun returnJavaLangDouble_pp_jsdoctypemappings(): Double? {
  return null
 }

 internal open fun returnJavaLangCharacter_pp_jsdoctypemappings(): Char? {
  return null
 }

 internal open fun returnJavaLangBoolean_pp_jsdoctypemappings(): Boolean? {
  return null
 }

 internal open fun returnByte_pp_jsdoctypemappings(): Byte {
  return 0.toByte()
 }

 internal open fun returnShort_pp_jsdoctypemappings(): Short {
  return 0.toShort()
 }

 internal open fun returnInt_pp_jsdoctypemappings(): Int {
  return 0
 }

 internal open fun returnLong_pp_jsdoctypemappings(): Long {
  return 0L
 }

 internal open fun returnFloat_pp_jsdoctypemappings(): Float {
  return 0.0f
 }

 internal open fun returnDouble_pp_jsdoctypemappings(): Double {
  return 0.0
 }

 internal open fun returnChar_pp_jsdoctypemappings(): Char {
  return 0.toChar()
 }

 internal open fun returnBoolean_pp_jsdoctypemappings(): Boolean {
  return false
 }

 internal open fun returnVoid_pp_jsdoctypemappings() {}

 internal open fun returnNativeFunction_pp_jsdoctypemappings(): NativeFunction? {
  return null
 }

 internal open fun returnNativeType_pp_jsdoctypemappings(): NativeType? {
  return null
 }

 internal open fun returnExportedType_pp_jsdoctypemappings(): JsDocTypeMappings.ExportedType? {
  return null
 }

 internal open fun <MethodTypeParameter> returnMethodTypeParameter_pp_jsdoctypemappings(): MethodTypeParameter {
  return null as MethodTypeParameter
 }

 internal open fun returnNativeNumber_pp_jsdoctypemappings(): NativeNumber? {
  return null
 }

 internal open fun returnNativeBoolean_pp_jsdoctypemappings(): NativeBoolean? {
  return null
 }

 internal open fun returnNativeString_pp_jsdoctypemappings(): NativeString? {
  return null
 }

 internal open fun returnNativeNull_pp_jsdoctypemappings(): NativeNull? {
  return null
 }

 internal open fun returnNativeUndefined_pp_jsdoctypemappings(): NativeUndefined? {
  return null
 }

 internal open fun returnNativeVoid_pp_jsdoctypemappings(): NativeVoid? {
  return null
 }

 internal open fun returnStar_pp_jsdoctypemappings(): NativeStar? {
  return null
 }

 internal open fun returnNativeWildcard_pp_jsdoctypemappings(): NativeWildcard? {
  return null
 }

 @JsFunction
 fun interface NativeFunction {
  fun f()
 }

 @JsType(name = "Array", namespace = JsPackage.GLOBAL, isNative = true)
 open class NativeType internal constructor()

 @JsType(name = "ExportedTypeNewName")
 open inner class ExportedType internal constructor()

 @JsType(name = "number", namespace = JsPackage.GLOBAL, isNative = true)
 interface NativeNumber

 @JsType(name = "boolean", namespace = JsPackage.GLOBAL, isNative = true)
 interface NativeBoolean

 @JsType(name = "string", namespace = JsPackage.GLOBAL, isNative = true)
 interface NativeString

 @JsType(name = "null", namespace = JsPackage.GLOBAL, isNative = true)
 interface NativeNull

 @JsType(name = "undefined", namespace = JsPackage.GLOBAL, isNative = true)
 interface NativeUndefined

 @JsType(name = "void", namespace = JsPackage.GLOBAL, isNative = true)
 interface NativeVoid

 @JsType(name = "*", namespace = JsPackage.GLOBAL, isNative = true)
 interface NativeStar

 @JsType(name = "?", namespace = JsPackage.GLOBAL, isNative = true)
 interface NativeWildcard
}
