// Generated from "j2ktjavac/AnonymousClassWithNullableTypeArgument.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "INCOMPATIBLE_OBJC_NAME_OVERRIDE",
 "REDUNDANT_ELSE_IN_WHEN")

package j2ktjavac

import javaemul.lang.*
import java.lang.RuntimeException
import kotlin.Any
import kotlin.String
import kotlin.Suppress
import kotlin.jvm.JvmStatic

open class AnonymousClassWithNullableTypeArgument {
 companion object {
  @JvmStatic
  fun testExplicitTypeArguments(): Supplier<Any?> {
   return object : Supplier<Any?> {
    override fun get(): Any? {
     return null
    }
   }
  }

  @JvmStatic
  fun testImplicitTypeArguments_inferredFromMembersAndReturnType(): Supplier<Any?> {
   return object : Supplier<Any> {
    override fun get(): Any? {
     return null
    }
   } as Supplier<Any?>
  }

  @JvmStatic
  fun testImplicitTypeArguments_inferredFromMembers() {
   object : Supplier<Any> {
    override fun get(): Any? {
     return null
    }
   }
  }

  @JvmStatic
  fun testImplicitTypeArguments_inferredFromMembersAndArgument() {
   object : AbstractHolder<String>("Supplier") {
    override fun get(): String? {
     return null
    }
   }
  }

  @JvmStatic
  fun testImplicitTypeArguments_inferredFromArgument() {
   object : Holder<String>(
    AnonymousClassWithNullableTypeArgument.nullableString()!!,
   ) {}
  }

  @JvmStatic
  fun testImplicitTypeArguments_inferredFromArgumentAndReturnType(): Holder<String?> {
   return object : Holder<String>("Supplier") {} as Holder<String?>
  }

  @JvmStatic
  fun <T> testExplicitSuperclassTypeArguments(): ParameterizedEmptyClass<T?> {
   return object : ParameterizedEmptyClass<T?>() {}
  }

  @JvmStatic
  fun <T> testExplicitSuperInterfaceTypeArguments(): ParameterizedEmptyInterface<T?> {
   return object : ParameterizedEmptyInterface<T?> {}
  }

  @JvmStatic
  fun nullableString(): String? {
   return null
  }
 }

 fun interface Supplier<V> {
  fun get(): V
 }

 abstract class AbstractHolder<V> {
  constructor(value: V)

  abstract fun get(): V
 }

 open class Holder<V> {
  constructor(value: V)

  open fun get(): V {
   throw RuntimeException()
  }
 }

 open class ParameterizedEmptyClass<T> internal constructor()

 interface ParameterizedEmptyInterface<T>
}
