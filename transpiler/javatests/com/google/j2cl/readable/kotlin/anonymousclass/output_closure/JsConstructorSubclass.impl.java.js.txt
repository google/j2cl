goog.module('anonymousclass.JsConstructorSubclass$impl');

const JsConstructorClass = goog.require('anonymousclass.JsConstructorClass$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let AnonymousClassKt = goog.forwardDeclare('anonymousclass.AnonymousClassKt$impl');
let $1 = goog.forwardDeclare('anonymousclass.JsConstructorSubclass.$1$impl');

/**
 * @final
 */
class JsConstructorSubclass extends JsConstructorClass {
 
 constructor() {
  JsConstructorSubclass.$clinit();
  let /** $1 */ tmp;
  if (AnonymousClassKt.m_getTrueVar__boolean()) {
   tmp = $1.$create__anonymousclass_JsConstructorSubclass(null);
  } else {
   tmp = null;
  }
  super(tmp);
  this.$ctor__anonymousclass_JsConstructorSubclass__void();
 }
 /** @nodts */
 $ctor__anonymousclass_JsConstructorSubclass__void() {}
 /** @nodts */
 static $clinit() {
  JsConstructorSubclass.$clinit = () =>{};
  JsConstructorSubclass.$loadModules();
  JsConstructorClass.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof JsConstructorSubclass;
 }
 
 /** @nodts */
 static $loadModules() {
  AnonymousClassKt = goog.module.get('anonymousclass.AnonymousClassKt$impl');
  $1 = goog.module.get('anonymousclass.JsConstructorSubclass.$1$impl');
 }
}
$Util.$setClassMetadata(JsConstructorSubclass, 'anonymousclass.JsConstructorSubclass');

exports = JsConstructorSubclass;

//# sourceMappingURL=JsConstructorSubclass.js.map
