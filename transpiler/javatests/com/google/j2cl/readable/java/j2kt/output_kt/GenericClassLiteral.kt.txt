// Generated from "j2kt/GenericClassLiteral.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "INCOMPATIBLE_OBJC_NAME_OVERRIDE",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import java.lang.Class
import kotlin.Any
import kotlin.Suppress
import kotlin.jvm.javaObjectType

open class GenericClassLiteral {
 open fun test(genericFoo: Generic<Foo>) {
  this.accept<Generic<Any>>(
   genericFoo as Generic<Any>,
   Generic::class.javaObjectType as Class<Generic<Any>>,
  )
 }

 open fun <T: Any> accept(foo: T, cls: Class<T>) {}

 interface Generic<T: Any>

 interface Foo
}
