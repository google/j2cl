goog.module('jstypeenum.Color$impl');

const Enum = goog.require('java.lang.Enum$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $Equality = goog.forwardDeclare('nativebootstrap.Equality$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Enums = goog.forwardDeclare('vmbootstrap.Enums$impl');

/**
 * @final
 * @extends {Enum<!Color>}
 */
class Color extends Enum {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {!Color} */
 static $create__java_lang_String__int(/** ?string */ $name, /** number */ $ordinal) {
  let $instance = new Color();
  $instance.$ctor__jstypeenum_Color__java_lang_String__int__void($name, $ordinal);
  return $instance;
 }
 /** @nodts */
 $ctor__jstypeenum_Color__java_lang_String__int__void(/** ?string */ $name, /** number */ $ordinal) {
  this.f_name__java_lang_Enum_ = $name;
  this.f_ordinal__java_lang_Enum_ = $ordinal;
  this.$ctor__java_lang_Enum__java_lang_String__int__void($name, $ordinal);
 }
 /** @return {!Color} */
 static valueOf(/** string */ name) {
  Color.$clinit();
  if ($Equality.$same(Color.f_namesToValuesMap__jstypeenum_Color_, null)) {
   Color.f_namesToValuesMap__jstypeenum_Color_ = (/**@type {Map<?string, !Color>}*/ ($Enums.createMapFromValues(Color.values())));
  }
  return /**@type {Color}*/ ($Enums.getValueFromNameAndMap(name, Color.f_namesToValuesMap__jstypeenum_Color_));
 }
 /** @return {!Array<!Color>} */
 static values() {
  Color.$clinit();
  return /**@type {!Array<!Color>}*/ ($Arrays.$stampType([Color.RED, Color.GREEN, Color.BLUE], Color));
 }
 /** @nodts */
 static $clinit() {
  Color.$clinit = () =>{};
  Color.$loadModules();
  Enum.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof Color;
 }
 
 /** @nodts */
 static $loadModules() {
  $Equality = goog.module.get('nativebootstrap.Equality$impl');
  $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
  $Enums = goog.module.get('vmbootstrap.Enums$impl');
 }
}
/**@const {number} @nodts*/
Color.$ordinal_RED__jstypeenum_Color = 0;
/**@const {number} @nodts*/
Color.$ordinal_GREEN__jstypeenum_Color = 1;
/**@const {number} @nodts*/
Color.$ordinal_BLUE__jstypeenum_Color = 2;
/**@const {!Color}*/
Color.RED = /**@pureOrBreakMyCode*/ Color.$create__java_lang_String__int($Util.$makeEnumName('RED'), Color.$ordinal_RED__jstypeenum_Color);
/**@const {!Color}*/
Color.GREEN = /**@pureOrBreakMyCode*/ Color.$create__java_lang_String__int($Util.$makeEnumName('GREEN'), Color.$ordinal_GREEN__jstypeenum_Color);
/**@const {!Color}*/
Color.BLUE = /**@pureOrBreakMyCode*/ Color.$create__java_lang_String__int($Util.$makeEnumName('BLUE'), Color.$ordinal_BLUE__jstypeenum_Color);
/**@type {Map<?string, !Color>} @nodts*/
Color.f_namesToValuesMap__jstypeenum_Color_;
$Util.$setClassMetadataForEnum(Color, 'jstypeenum.Color');

exports = Color;

//# sourceMappingURL=Color.js.map
