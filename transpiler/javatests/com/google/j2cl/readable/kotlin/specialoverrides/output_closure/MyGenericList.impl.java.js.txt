goog.module('specialoverrides.MyGenericList$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const List = goog.require('java.util.List$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Iterable = goog.forwardDeclare('java.lang.Iterable$impl');
let Collection = goog.forwardDeclare('java.util.Collection$impl');
let Comparator = goog.forwardDeclare('java.util.Comparator$impl');
let Iterator = goog.forwardDeclare('java.util.Iterator$impl');
let ListIterator = goog.forwardDeclare('java.util.ListIterator$impl');
let Spliterator = goog.forwardDeclare('java.util.Spliterator$impl');
let Consumer = goog.forwardDeclare('java.util.function.Consumer$impl');
let Predicate = goog.forwardDeclare('java.util.function.Predicate$impl');
let UnaryOperator = goog.forwardDeclare('java.util.function.UnaryOperator$impl');
let Stream = goog.forwardDeclare('java.util.stream.Stream$impl');

/**
 * @abstract
 * @template E
 * @implements {List<E>}
 */
class MyGenericList extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts */
 $ctor__specialoverrides_MyGenericList__void() {
  this.$ctor__java_lang_Object__void();
 }
 /** @nodts @return {number} */
 m_getSize__int() {
  return 0;
 }
 /** @override @return {boolean} */
 contains(/** E */ element) {
  return false;
 }
 /** @override @return {boolean} */
 containsAll(/** !Collection<?> */ elements) {
  return false;
 }
 /** @override @return {number} */
 indexOf(/** E */ element) {
  return 0;
 }
 /** @override @return {number} */
 lastIndexOf(/** E */ element) {
  return 0;
 }
 /** @override @return {boolean} */
 remove(/** E */ element) {
  return false;
 }
 /** @final @override @return {number} */
 size() {
  return this.m_getSize__int();
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} */
 m_forEach__java_util_function_Consumer__void(/** Consumer<?> */ arg0) {
  Iterable.m_forEach__$default__java_lang_Iterable__java_util_function_Consumer__void(this, arg0);
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} @return {!Spliterator<E>} */
 m_spliterator__java_util_Spliterator() {
  return /**@type {!Spliterator<E>}*/ (List.m_spliterator__$default__java_util_List__java_util_Spliterator(this));
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} @return {!Stream<E>} */
 m_parallelStream__java_util_stream_Stream() {
  return /**@type {!Stream<E>}*/ (Collection.m_parallelStream__$default__java_util_Collection__java_util_stream_Stream(this));
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} @return {boolean} */
 m_removeIf__java_util_function_Predicate__boolean(/** !Predicate<?> */ arg0) {
  return Collection.m_removeIf__$default__java_util_Collection__java_util_function_Predicate__boolean(this, arg0);
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} @return {!Stream<E>} */
 m_stream__java_util_stream_Stream() {
  return /**@type {!Stream<E>}*/ (Collection.m_stream__$default__java_util_Collection__java_util_stream_Stream(this));
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} @return {Array<*>} */
 m_toArray__arrayOf_java_lang_Object() {
  return Collection.m_toArray__$default__java_util_Collection__arrayOf_java_lang_Object(this);
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} @template T @return {Array<T>} */
 m_toArray__arrayOf_java_lang_Object__arrayOf_java_lang_Object(/** Array<T> */ arg0) {
  return Collection.m_toArray__$default__java_util_Collection__arrayOf_java_lang_Object__arrayOf_java_lang_Object(this, arg0);
 }
 //Default method forwarding stub.
 /** @override @suppress{visibility} @return {Array<E>} */
 toArray() {
  return Collection.m__private_jsToArray____$default__java_util_Collection__arrayOf_java_lang_Object(this);
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} */
 m_replaceAll__java_util_function_UnaryOperator__void(/** !UnaryOperator<E> */ arg0) {
  List.m_replaceAll__$default__java_util_List__java_util_function_UnaryOperator__void(this, arg0);
 }
 //Default method forwarding stub.
 /** @override @nodts @suppress{visibility} */
 m_sort__java_util_Comparator__void(/** Comparator<?> */ arg0) {
  List.m_sort__$default__java_util_List__java_util_Comparator__void(this, arg0);
 }
 /** @nodts */
 static $clinit() {
  MyGenericList.$clinit = () =>{};
  MyGenericList.$loadModules();
  j_l_Object.$clinit();
  List.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof MyGenericList;
 }
 /** @abstract @override @nodts @suppress{visibility} @return {!Iterator<?>} */
 m_iterator__java_util_Iterator() {}
 /** @abstract @override @suppress{visibility} @return {boolean} */
 add(/** E */ arg0) {}
 /** @abstract @override @suppress{visibility} @return {boolean} */
 addAll(/** Collection<?> */ arg0) {}
 /** @abstract @override @suppress{visibility} */
 clear() {}
 /** @abstract @override @suppress{visibility} @return {boolean} */
 isEmpty() {}
 /** @abstract @override @suppress{visibility} @return {boolean} */
 removeAll(/** Collection<?> */ arg0) {}
 /** @abstract @override @suppress{visibility} @return {boolean} */
 retainAll(/** Collection<?> */ arg0) {}
 /** @abstract @override @suppress{visibility} */
 addAtIndex(/** number */ arg0, /** E */ arg1) {}
 /** @abstract @override @suppress{visibility} @return {boolean} */
 addAllAtIndex(/** number */ arg0, /** Collection<?> */ arg1) {}
 /** @abstract @override @suppress{visibility} @return {E} */
 getAtIndex(/** number */ arg0) {}
 /** @abstract @override @nodts @suppress{visibility} @return {ListIterator<E>} */
 m_listIterator__java_util_ListIterator() {}
 /** @abstract @override @nodts @suppress{visibility} @return {ListIterator<E>} */
 m_listIterator__int__java_util_ListIterator(/** number */ arg0) {}
 /** @abstract @override @suppress{visibility} @return {E} */
 removeAtIndex(/** number */ arg0) {}
 /** @abstract @override @suppress{visibility} @return {E} */
 setAtIndex(/** number */ arg0, /** E */ arg1) {}
 /** @abstract @override @suppress{visibility} @return {List<E>} */
 subList(/** number */ arg0, /** number */ arg1) {}
 
 /** @nodts */
 static $loadModules() {
  Iterable = goog.module.get('java.lang.Iterable$impl');
  Collection = goog.module.get('java.util.Collection$impl');
 }
}
List.$markImplementor(MyGenericList);
$Util.$setClassMetadata(MyGenericList, 'specialoverrides.MyGenericList');

exports = MyGenericList;

//# sourceMappingURL=MyGenericList.js.map
