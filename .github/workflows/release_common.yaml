# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: Reusable Release Workflow

# This workflow is designed to be called from other workflows.
on:
  workflow_call:
    inputs:
      version:
        description: 'The version to release'
        required: true
        type: string
      publish_to_sonatype:
        description: 'Publish the release to Sonatype'
        type: boolean
        required: true
      sonatype_auto_publish:
        description: 'Automatically publish the release to Sonatype'
        type: boolean
        required: false
        default: false
      publish_to_bcr:
        description: 'Publish the repo to BCR'
        type: boolean
        required: false
        default: false
      create_github_release:
        description: 'Create a GitHub release (which also creates a git tag)'
        type: boolean
        required: false
        default: false
      continue_if_release_exists:
        description: 'Continue the workflow even if the GitHub release already exists'
        type: boolean
        required: false
        default: false
    secrets:
      SONATYPE_USERNAME_TOKEN:
        description: 'Sonatype username token'
        required: false
      SONATYPE_PASSWORD_TOKEN:
        description: 'Sonatype password token'
        required: false
      MAVEN_GPG_PRIVATE_KEY:
        description: 'GPG private key for signing Maven artifacts'
        required: false
      MAVEN_GPG_PASSPHRASE:
        description: 'Passphrase for the GPG private key'
        required: false

jobs:
  publish_to_sonatype:
    runs-on: ubuntu-latest
    if: ${{ inputs.publish_to_sonatype }}

    steps:
      - name: Check secrets are provided
        run: |
          check_secret() {
            if [[ -z "${2:-}" ]]; then
              echo "Error: secret ${1} is required but not provided."
              exit 1
            fi
          }
          check_secret "SONATYPE_USERNAME_TOKEN" "${{ secrets.SONATYPE_USERNAME_TOKEN }}"
          check_secret "SONATYPE_PASSWORD_TOKEN" "${{ secrets.SONATYPE_PASSWORD_TOKEN }}"
          check_secret "MAVEN_GPG_PRIVATE_KEY" "${{ secrets.MAVEN_GPG_PRIVATE_KEY }}"
          check_secret "MAVEN_GPG_PASSPHRASE" "${{ secrets.MAVEN_GPG_PASSPHRASE }}"
      - name: Checkout current commit
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Maven and Bazel require Java to be available.
      - name: Setup Java
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          java-version: '21'
          distribution: 'zulu'
          java-package: jdk
          # This will trigger the import of the private key in the GPG secret keyring.
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          # This will create the maven settings.xml file needed for deploying to Sonatype.
          server-id: central
          server-username: SONATYPE_USERNAME_TOKEN
          server-password: SONATYPE_PASSWORD_TOKEN
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Setup Bazel
        uses: bazelbuild/setup-bazelisk@v3

      # NOTE: This step assumes the calling repository has this script at the specified path.
      - name: Publish to Sonatype
        run: |
          auto_publish_flag=""
          if [[ "${{ inputs.sonatype_auto_publish }}" == true ]]; then
            auto_publish_flag="--sonatype-auto-publish"
          fi
          ./maven/publish_to_sonatype.sh --version ${{ inputs.version }} $auto_publish_flag
        env:
          SONATYPE_USERNAME_TOKEN: ${{ secrets.SONATYPE_USERNAME_TOKEN }}
          SONATYPE_PASSWORD_TOKEN: ${{ secrets.SONATYPE_PASSWORD_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}


  create_github_release:
    runs-on: ubuntu-latest
    if: ${{ inputs.create_github_release }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if release exists
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set +e # Do not exit on error. gh release view will return non-zero exit code if the release does not exist.
          gh release view ${{ inputs.version }} > /dev/null 2>&1
          if [ $? -eq 0 ]; then
            if [[ "${{ inputs.continue_if_release_exists }}" == "true" ]]; then
              echo "Release ${{ inputs.version }} already exists. Skipping release creation."
              echo "github_release_exists=true" >> $GITHUB_OUTPUT
            else
              echo "Error: Release ${{ inputs.version }} already exists."
              echo "Set 'continue_if_release_exists' to true if you want to continue with the exising release."
              exit 1
            fi
          else
            echo "Release ${{ inputs.version }} does not exist."
            echo "github_release_exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Build the archive file
        id: build_archive
        run: |
          tag="${{ inputs.version }}"
          repo="${{ github.event.repository.name }}"
          # The prefix is used to determine the directory structure of the archive. We strip the 'v'
          # prefix from the version number.
          directory="${repo}-${tag#v}"
          archive="${repo}-${tag}.tar.gz"
          git archive --format=tar --prefix=${directory}/ -o ${archive} ${tag}
          echo "archive_path=${archive}" >> $GITHUB_OUTPUT

      - name: Create Github Release
        if: ${{ steps.check_release.outputs.github_release_exists == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # This will also create a git tag if it does not exist.
          gh release create "${{ inputs.version }}" --generate-notes
          gh release upload "${{ inputs.version }}" "${{ steps.build_archive.outputs.archive_path }}"
          echo "Release ${{ inputs.version }} created successfully."


  publish_to_bcr:
    if: ${{ inputs.publish_to_bcr }}
    needs: create_github_release
    uses: bazel-contrib/publish-to-bcr/.github/workflows/publish.yaml@v0.2.2
    with:
      tag_name: ${{ inputs.version }}
      registry_fork: j2cl-github-bot/bazel-central-registry
      attest: true
      draft: true
      author_name: j2cl-github-bot
      author_email: j2cl-github-bot@google.com
    permissions:
      contents: write
      id-token: write
      attestations: write
    secrets:
      publish_token: ${{ secrets.BCR_PUBLISH_TOKEN }}
