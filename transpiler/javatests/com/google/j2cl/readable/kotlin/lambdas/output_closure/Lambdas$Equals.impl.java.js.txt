goog.module('lambdas.Lambdas.Equals$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('lambdas.Lambdas.Equals.$LambdaAdaptor$impl');

/**
 * @interface
 * @template T
 */
class Equals {
 /** @abstract @return {boolean} */
 equals(/** * */ o) {}
 /** @abstract @nodts @return {?T} */
 m_get__java_lang_Object() {}
 /** @nodts @template T @return {!Equals<T>} */
 static $adapt(/** ?function(*):boolean */ fn) {
  Equals.$clinit();
  return /**@type {!$LambdaAdaptor<T>}*/ (new $LambdaAdaptor(fn));
 }
 /** @nodts @template T @return {?T} */
 static m_get__$default__lambdas_Lambdas_Equals__java_lang_Object(/** !Equals<T> */ $thisArg) {
  Equals.$clinit();
  return null;
 }
 /** @nodts */
 static $clinit() {
  Equals.$clinit = () =>{};
  Equals.$loadModules();
 }
 
 static $markImplementor(/** Function */ ctor) {
  ctor.prototype.$implements__lambdas_Lambdas_Equals = true;
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$implements__lambdas_Lambdas_Equals;
 }
 
 /** @nodts */
 static $loadModules() {
  $LambdaAdaptor = goog.module.get('lambdas.Lambdas.Equals.$LambdaAdaptor$impl');
 }
}
Equals.$markImplementor(/**@type {Function}*/ (Equals));
$Util.$setClassMetadataForInterface(/**@type {Function}*/ (Equals), 'lambdas.Lambdas$Equals');

exports = Equals;

//# sourceMappingURL=Lambdas$Equals.js.map
