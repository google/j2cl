[SourceMap] => [SourceMap]
[constructor] => [constructor]
[i: Int] => [i] "i"
[constructor] => [SourceMap.$clinit();] "sourcemap.SourceMap.<init>"
[constructor] => [super();] "sourcemap.SourceMap.<init>"
[constructor] => [/**@type {number} @nodts*/
  this.f_uninitializedInstanceField__sourcemap_SourceMap_ = 0;] "sourcemap.SourceMap.<init>"
[uninitializedInstanceField] => [f_uninitializedInstanceField__sourcemap_SourceMap_]
[constructor] => [/**@type {string} @nodts*/
  this.f_uninitializedInstanceField2__sourcemap_SourceMap_;] "sourcemap.SourceMap.<init>"
[uninitializedInstanceField2] => [f_uninitializedInstanceField2__sourcemap_SourceMap_]
[constructor] => [/**@type {number} @nodts*/
  this.f_initializedInstanceField__sourcemap_SourceMap_ = 0;] "sourcemap.SourceMap.<init>"
[initializedInstanceField] => [f_initializedInstanceField__sourcemap_SourceMap_]
[constructor] => [this.$ctor__sourcemap_SourceMap__int__void(i);] "sourcemap.SourceMap.<init>"
[constructor] => [$ctor__sourcemap_SourceMap__int__void]
[i: Int] => [i] "i"
[@JsConstructor constructor(i: Int)] => [this.$ctor__java_lang_Object__void();] "sourcemap.SourceMap.<init>"
[uninitializedInstanceField = 1000] => [this.f_uninitializedInstanceField__sourcemap_SourceMap_ = 1000;] "sourcemap.SourceMap.<init>"
[uninitializedInstanceField == 1000) {
      uninitializedInstanceField2 = "Hello!"
    }] => [if (this.f_uninitializedInstanceField__sourcemap_SourceMap_ == 1000) {
   this.f_uninitializedInstanceField2__sourcemap_SourceMap_ = 'Hello!';
...   this.f_uninitializedInstanceField2__sourcemap_SourceMap_ = 'Universe!';
  }] "sourcemap.SourceMap.<init>"
[uninitializedInstanceField2 = "Hello!"] => [this.f_uninitializedInstanceField2__sourcemap_SourceMap_ = 'Hello!';] "sourcemap.SourceMap.<init>"
[uninitializedInstanceField == 2000) {
      uninitializedInstanceField2 = "World!"
    }] => [if (this.f_uninitializedInstanceField__sourcemap_SourceMap_ == 2000) {
   this.f_uninitializedInstanceField2__sourcemap_SourceMap_ = 'World!';
...   this.f_uninitializedInstanceField2__sourcemap_SourceMap_ = 'Universe!';
  }] "sourcemap.SourceMap.<init>"
[uninitializedInstanceField2 = "World!"] => [this.f_uninitializedInstanceField2__sourcemap_SourceMap_ = 'World!';] "sourcemap.SourceMap.<init>"
[uninitializedInstanceField2 = "Universe!"] => [this.f_uninitializedInstanceField2__sourcemap_SourceMap_ = 'Universe!';] "sourcemap.SourceMap.<init>"
[2] => [this.f_initializedInstanceField__sourcemap_SourceMap_ = 2;] "sourcemap.SourceMap.<init>"
[constructor] => [$ctor__sourcemap_SourceMap__int__java_lang_String__void]
[uninitializedInstanceField: Int] => [uninitializedInstanceField] "uninitializedInstanceField"
[uninitializedInstanceField2: String] => [uninitializedInstanceField2] "uninitializedInstanceField2"
[testStatements] => [m_testStatements__int__int__int__int__int_$p_sourcemap_SourceMap]
[a: Int] => [a] "a"
[b: Int] => [b] "b"
[times: Int] => [times] "times"
[number: Int] => [number_1] "number"
[var value = 0] => [let value = 0;] "sourcemap.SourceMap.testStatements"
[var value = 0] => [value] "value"
[for (i in 0 until times) {
      value++
    }] => [for (let inductionVariable = 0; inductionVariable < times; inductionVariable = inductionVariable + 1 | 0) {
   let i = inductionVariable;
...   value = unary + 1 | 0;
  }] "sourcemap.SourceMap.testStatements"
[i] => [let i = inductionVariable;] "sourcemap.SourceMap.testStatements"
[i] => [i] "i"
[value++] => [value = unary + 1 | 0;] "sourcemap.SourceMap.testStatements"
[number % 2 == 0) {
      value += 1
    }] => [if ($Primitives.coerceDivision(number_1 % 2) == 0) {
   value = value + 1 | 0;
...   value = value + 2 | 0;
  }] "sourcemap.SourceMap.testStatements"
[value += 1] => [value = value + 1 | 0;] "sourcemap.SourceMap.testStatements"
[value += 2] => [value = value + 2 | 0;] "sourcemap.SourceMap.testStatements"
[var b2 = b] => [let b2 = b;] "sourcemap.SourceMap.testStatements"
[var b2 = b] => [b2] "b2"
[while (b2 > 0 && b2 < 100) {
      b2 -= 10
    }] => [while (b2 > 0 && b2 < 100) {
   b2 = b2 - 10 | 0;
  }] "sourcemap.SourceMap.testStatements"
[b2 -= 10] => [b2 = b2 - 10 | 0;] "sourcemap.SourceMap.testStatements"
[value += a + b2] => [value = value + (a + b2) | 0;] "sourcemap.SourceMap.testStatements"
[for (i in 0..2) {
      when (number) {
...      if (i == 1) break
    }] => [outerLoop: for (let inductionVariable_1 = 0; inductionVariable_1 <= 2; inductionVariable_1 = inductionVariable_1 + 1 | 0) {
   let i_1 = inductionVariable_1;
...   }
  }] "sourcemap.SourceMap.testStatements"
[for (i in 0..2) {
      when (number) {
...      if (i == 1) break
    }] => [for (let inductionVariable_1 = 0; inductionVariable_1 <= 2; inductionVariable_1 = inductionVariable_1 + 1 | 0) {
   let i_1 = inductionVariable_1;
...   }
  }] "sourcemap.SourceMap.testStatements"
[i] => [let i_1 = inductionVariable_1;] "sourcemap.SourceMap.testStatements"
[i] => [i_1] "i"
[when (number) {
        1 -> {
...        3 -> break@outerLoop
      }] => [switch (tmp0_subject) {
    case 1:
...     }
   }] "sourcemap.SourceMap.testStatements"
[value += 5] => [value = value + 5 | 0;] "sourcemap.SourceMap.testStatements"
[break] => [break outerLoop;] "sourcemap.SourceMap.testStatements"
[value += 2] => [value = value + 2 | 0;] "sourcemap.SourceMap.testStatements"
[break@outerLoop] => [break outerLoop;] "sourcemap.SourceMap.testStatements"
[break@outerLoop] => [break outerLoop;] "sourcemap.SourceMap.testStatements"
[i == 1) break] => [if (i_1 == 1) {
    break;
   }] "sourcemap.SourceMap.testStatements"
[break] => [break;] "sourcemap.SourceMap.testStatements"
[return value] => [return value;] "sourcemap.SourceMap.testStatements"
[testLambdaAndMethodReference] => [m_testLambdaAndMethodReference__int__void_$p_sourcemap_SourceMap]
[n: Int] => [n] "n"
[val f = { i: Int -> i + 1 }] => [let f = Function1.$adapt(/**  @return {?}*/ ((/** ? */ i) =>{
   let i_1 = (/**@type {!Integer}*/ ($Casts.$to(i, Integer))).m_intValue__int();
   return Integer.m_valueOf__int__java_lang_Integer(i_1 + 1 | 0);
  }));] "sourcemap.SourceMap.testLambdaAndMethodReference"
[val f = { i: Int -> i + 1 }] => [f] "f"
[i: Int] => [i] "i"
[{ i: Int -> i + 1 }] => [let i_1 = (/**@type {!Integer}*/ ($Casts.$to(i, Integer))).m_intValue__int();] "sourcemap.SourceMap.<lambda in testLambdaAndMethodReference>"
[i: Int] => [i_1] "i"
[i + 1] => [return Integer.m_valueOf__int__java_lang_Integer(i_1 + 1 | 0);] "sourcemap.SourceMap.<lambda in testLambdaAndMethodReference>"
[{
    val f = { i: Int -> i + 1 }
...    val f3 = this::simpleMethod
  }] => [let /** ArrayList<!*> */ $propertyReferenceQualifier;] "sourcemap.SourceMap.testLambdaAndMethodReference"
[val f2 = ArrayList<Any>()::size] => [let f2 = /**@type {!MutableKProperty0Impl<!Integer>}*/ (($propertyReferenceQualifier = (/**@type {!ArrayList<!*>}*/ (ArrayList.$create__())), MutableKProperty0Impl.$create__kotlin_jvm_functions_Function0__kotlin_jvm_functions_Function1(Function0.$adapt(/**  @return {?}*/ (() =>{
   return Integer.m_valueOf__int__java_lang_Integer($propertyReferenceQualifier.size());
  })), null)));] "sourcemap.SourceMap.testLambdaAndMethodReference"
[val f2 = ArrayList<Any>()::size] => [f2] "f2"
[ArrayList<Any>()::size] => [return Integer.m_valueOf__int__java_lang_Integer($propertyReferenceQualifier.size());] "sourcemap.SourceMap.<lambda in testLambdaAndMethodReference>"
[val f3 = this::simpleMethod] => [let f3 = Function0.$adapt(/**  @return {!Integer}*/ (() =>{
   return Integer.m_valueOf__int__java_lang_Integer(this.m_simpleMethod__int_$p_sourcemap_SourceMap());
  }));] "sourcemap.SourceMap.testLambdaAndMethodReference"
[val f3 = this::simpleMethod] => [f3] "f3"
[this::simpleMethod] => [return Integer.m_valueOf__int__java_lang_Integer(this.m_simpleMethod__int_$p_sourcemap_SourceMap());] "sourcemap.SourceMap.<lambda in testLambdaAndMethodReference>"
[simpleMethod] => [m_simpleMethod__int_$p_sourcemap_SourceMap]
[1] => [return 1;] "sourcemap.SourceMap.simpleMethod"
[testLocalClass] => [m_testLocalClass__void_$p_sourcemap_SourceMap]
[LocalClass()] => [$1LocalClass.$create__sourcemap_SourceMap(this);] "sourcemap.SourceMap.testLocalClass"
[testWhenExpression] => [m_testWhenExpression__void_$p_sourcemap_SourceMap]
[var v = 1] => [let v = 1;] "sourcemap.SourceMap.testWhenExpression"
[var v = 1] => [v] "v"
[val r =
      when (v) {
...        else -> 20
      }] => [let r = tmp0_subject == 1 || tmp0_subject == 2 ? 10 : 20;] "sourcemap.SourceMap.testWhenExpression"
[val r =
      when (v) {
...        else -> 20
      }] => [r] "r"
[SourceMap] => [m_reversed__java_util_Comparator]
[SourceMap] => [return /**@type {Comparator<T>}*/ (Comparator.m_reversed__$default__java_util_Comparator__java_util_Comparator(this));] "sourcemap.SourceMap.reversed"
[SourceMap] => [m_thenComparing__java_util_Comparator__java_util_Comparator]
[SourceMap] => [return /**@type {Comparator<T>}*/ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_Comparator__java_util_Comparator(this, arg0));] "sourcemap.SourceMap.thenComparing"
[SourceMap] => [m_thenComparing__java_util_function_Function__java_util_Comparator__java_util_Comparator]
[SourceMap] => [return /**@type {Comparator<T>}*/ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function__java_util_Comparator__java_util_Comparator(this, arg0, arg1));] "sourcemap.SourceMap.thenComparing"
[SourceMap] => [m_thenComparing__java_util_function_Function__java_util_Comparator]
[SourceMap] => [return /**@type {Comparator<T>}*/ (Comparator.m_thenComparing__$default__java_util_Comparator__java_util_function_Function__java_util_Comparator(this, arg0));] "sourcemap.SourceMap.thenComparing"
[SourceMap] => [m_thenComparingInt__java_util_function_ToIntFunction__java_util_Comparator]
[SourceMap] => [return /**@type {Comparator<T>}*/ (Comparator.m_thenComparingInt__$default__java_util_Comparator__java_util_function_ToIntFunction__java_util_Comparator(this, arg0));] "sourcemap.SourceMap.thenComparingInt"
[SourceMap] => [m_thenComparingLong__java_util_function_ToLongFunction__java_util_Comparator]
[SourceMap] => [return /**@type {Comparator<T>}*/ (Comparator.m_thenComparingLong__$default__java_util_Comparator__java_util_function_ToLongFunction__java_util_Comparator(this, arg0));] "sourcemap.SourceMap.thenComparingLong"
[SourceMap] => [m_thenComparingDouble__java_util_function_ToDoubleFunction__java_util_Comparator]
[SourceMap] => [return /**@type {Comparator<T>}*/ (Comparator.m_thenComparingDouble__$default__java_util_Comparator__java_util_function_ToDoubleFunction__java_util_Comparator(this, arg0));] "sourcemap.SourceMap.thenComparingDouble"
[uninitializedStaticField] => [m_getUninitializedStaticField__double]
[internal var uninitializedStaticField: Double] => [SourceMap.$clinit();] "sourcemap.SourceMap.getUninitializedStaticField"
[internal var uninitializedStaticField: Double] => [return SourceMap.f_uninitializedStaticField__sourcemap_SourceMap_;] "sourcemap.SourceMap.getUninitializedStaticField"
[uninitializedStaticField] => [m_setUninitializedStaticField__double__void]
[internal var uninitializedStaticField: Double] => [set__] "<set-?>"
[internal var uninitializedStaticField: Double] => [SourceMap.$clinit();] "sourcemap.SourceMap.setUninitializedStaticField"
[internal var uninitializedStaticField: Double] => [SourceMap.f_uninitializedStaticField__sourcemap_SourceMap_ = set__;] "sourcemap.SourceMap.setUninitializedStaticField"
[initializedStaticField] => [m_getInitializedStaticField__java_lang_String]
[internal var initializedStaticField] => [SourceMap.$clinit();] "sourcemap.SourceMap.getInitializedStaticField"
[internal var initializedStaticField] => [return SourceMap.f_initializedStaticField__sourcemap_SourceMap_;] "sourcemap.SourceMap.getInitializedStaticField"
[initializedStaticField] => [m_setInitializedStaticField__java_lang_String__void]
[internal var initializedStaticField] => [set__] "<set-?>"
[internal var initializedStaticField] => [SourceMap.$clinit();] "sourcemap.SourceMap.setInitializedStaticField"
[internal var initializedStaticField] => [SourceMap.f_initializedStaticField__sourcemap_SourceMap_ = set__;] "sourcemap.SourceMap.setInitializedStaticField"
[SourceMap] => [$clinit]
[SourceMap] => [SourceMap.$clinit = () =>{};] "sourcemap.SourceMap.<clinit>"
[SourceMap] => [SourceMap.$loadModules();] "sourcemap.SourceMap.<clinit>"
[SourceMap] => [j_l_Object.$clinit();] "sourcemap.SourceMap.<clinit>"
[SourceMap] => [Comparator.$clinit();] "sourcemap.SourceMap.<clinit>"
[uninitializedStaticField = 10.0] => [SourceMap.f_uninitializedStaticField__sourcemap_SourceMap_ = 10;] "sourcemap.SourceMap.<clinit>"
["Hello"] => [SourceMap.f_initializedStaticField__sourcemap_SourceMap_ = 'Hello';] "sourcemap.SourceMap.<clinit>"
[uninitializedStaticField == 10.0) {
        initializedStaticField = "World"
      }] => [if ($Equality.$sameNumber(SourceMap.f_uninitializedStaticField__sourcemap_SourceMap_, 10)) {
   SourceMap.f_initializedStaticField__sourcemap_SourceMap_ = 'World';
  }] "sourcemap.SourceMap.<clinit>"
[initializedStaticField = "World"] => [SourceMap.f_initializedStaticField__sourcemap_SourceMap_ = 'World';] "sourcemap.SourceMap.<clinit>"
[SourceMap] => [/**@type {number} @nodts*/
SourceMap.f_uninitializedStaticField__sourcemap_SourceMap_ = 0;]
[uninitializedStaticField] => [f_uninitializedStaticField__sourcemap_SourceMap_]
[SourceMap] => [/**@type {string} @nodts*/
SourceMap.f_initializedStaticField__sourcemap_SourceMap_;]
[initializedStaticField] => [f_initializedStaticField__sourcemap_SourceMap_]
