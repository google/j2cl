// Generated from "j2kt/NullabilityPropagationWithMethodReferences.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import j2kt.NullabilityPropagationWithMethodReferences.Foo.ArrayFactory
import j2kt.NullabilityPropagationWithMethodReferences.Foo.Factory
import java.lang.RuntimeException
import kotlin.Array
import kotlin.Int
import kotlin.Suppress
import kotlin.arrayOfNulls
import kotlin.jvm.JvmStatic

class NullabilityPropagationWithMethodReferences {
 companion object {
  @JvmStatic
  fun <T> apply(t: T): T {
   throw RuntimeException()
  }

  @JvmStatic
  fun testConstructor(): Factory {
   return NullabilityPropagationWithMethodReferences.apply<Factory>(
    Factory {
     return@Factory Foo()
    },
   )
  }

  @JvmStatic
  fun testStaticMethod(): Factory {
   return NullabilityPropagationWithMethodReferences.apply<Factory>(
    Factory {
     return@Factory Foo.create()
    },
   )
  }

  @JvmStatic
  fun testInstanceMethod(foo: Foo): Factory {
   return NullabilityPropagationWithMethodReferences.apply<Factory>(
    Factory {
     return@Factory foo.copy()
    },
   )
  }

  @JvmStatic
  fun testNewArray(): ArrayFactory {
   return NullabilityPropagationWithMethodReferences.apply<ArrayFactory?>(
    ArrayFactory { arg0: Int ->
     return@ArrayFactory arrayOfNulls<Foo>(arg0) as Array<Foo>
    },
   )!!
  }
 }

 class Foo {
  fun copy(): Foo {
   return Foo()
  }

  companion object {
   @JvmStatic
   fun create(): Foo {
    return Foo()
   }
  }

  fun interface Factory {
   fun create(): Foo
  }

  fun interface ArrayFactory {
   fun create(size: Int): Array<Foo>
  }
 }
}
