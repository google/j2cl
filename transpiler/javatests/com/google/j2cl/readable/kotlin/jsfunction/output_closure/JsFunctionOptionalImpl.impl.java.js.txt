goog.module('jsfunction.JsFunctionOptionalImpl$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');
const $JavaScriptFunction = goog.require('vmbootstrap.JavaScriptFunction$impl');

let Double = goog.forwardDeclare('java.lang.Double$impl');
let InternalPreconditions = goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');
let $Primitives = goog.forwardDeclare('vmbootstrap.Primitives$impl');

/**
 * @final
 */
class JsFunctionOptionalImpl extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {function(number, ?number=):number} */
 static $create__() {
  JsFunctionOptionalImpl.$clinit();
  let $instance = new JsFunctionOptionalImpl();
  $instance.$ctor__jsfunction_JsFunctionOptionalImpl__void();
  return $Util.$makeLambdaFunction(JsFunctionOptionalImpl.prototype.m_m__int__java_lang_Double__int, $instance, JsFunctionOptionalImpl.$copy);
 }
 /** @nodts */
 $ctor__jsfunction_JsFunctionOptionalImpl__void() {
  this.$ctor__java_lang_Object__void();
 }
 /** @return {number} */
 m_m__int__java_lang_Double__int(/** number */ i, /** ?number= */ number_1) {
  return $Primitives.narrowDoubleToInt(i + Double.m_doubleValue__java_lang_Double__double(InternalPreconditions.m_checkNotNull__java_lang_Object__java_lang_Object(number_1)));
 }
 /** @nodts */
 static $clinit() {
  JsFunctionOptionalImpl.$clinit = () =>{};
  JsFunctionOptionalImpl.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance != null && !!instance.$is__jsfunction_JsFunctionOptionalImpl;
 }
 /** @nodts */
 static $copy(/** ? */ from, /** ? */ to) {
  to.$is__jsfunction_JsFunctionOptionalImpl = true;
 }
 
 /** @nodts */
 static $loadModules() {
  Double = goog.module.get('java.lang.Double$impl');
  InternalPreconditions = goog.module.get('javaemul.internal.InternalPreconditions$impl');
  $Primitives = goog.module.get('vmbootstrap.Primitives$impl');
 }
}
$JavaScriptFunction.$markImplementor(JsFunctionOptionalImpl);
$Util.$setClassMetadata(JsFunctionOptionalImpl, 'jsfunction.JsFunctionOptionalImpl');

exports = JsFunctionOptionalImpl;

//# sourceMappingURL=JsFunctionOptionalImpl.js.map
