goog.module('overwrittentypevariables.ParameterizedTypeImpl$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');
const ParameterizedType = goog.require('overwrittentypevariables.ParameterizedType$impl');

let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @final
 * @implements {ParameterizedType<string, !Integer>}
 */
class ParameterizedTypeImpl extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {!ParameterizedTypeImpl} */
 static $create__() {
  ParameterizedTypeImpl.$clinit();
  let $instance = new ParameterizedTypeImpl();
  $instance.$ctor__overwrittentypevariables_ParameterizedTypeImpl__void();
  return $instance;
 }
 /** @nodts */
 $ctor__overwrittentypevariables_ParameterizedTypeImpl__void() {
  this.$ctor__java_lang_Object__void();
 }
 /** @nodts @return {number} */
 m_accept__java_lang_String__int(/** string */ v) {
  return 1;
 }
 //Bridge method.
 /** @final @override @nodts @suppress{visibility} @return {!Integer} */
 m_accept__java_lang_Object__java_lang_Object(/** string */ arg0) {
  return Integer.m_valueOf__int__java_lang_Integer(this.m_accept__java_lang_String__int(/**@type {string}*/ ($Casts.$to(arg0, j_l_String))));
 }
 /** @nodts */
 static $clinit() {
  ParameterizedTypeImpl.$clinit = () =>{};
  ParameterizedTypeImpl.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof ParameterizedTypeImpl;
 }
 
 /** @nodts */
 static $loadModules() {
  Integer = goog.module.get('java.lang.Integer$impl');
  j_l_String = goog.module.get('java.lang.String$impl');
  $Casts = goog.module.get('vmbootstrap.Casts$impl');
 }
}
ParameterizedType.$markImplementor(ParameterizedTypeImpl);
$Util.$setClassMetadata(ParameterizedTypeImpl, 'overwrittentypevariables.ParameterizedTypeImpl');

exports = ParameterizedTypeImpl;

//# sourceMappingURL=ParameterizedTypeImpl.js.map
