// Generated from "j2kt/NullabilityInferenceProblem6.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "INCOMPATIBLE_OBJC_NAME_OVERRIDE",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import kotlin.Any
import kotlin.Suppress
import kotlin.jvm.JvmStatic

open class NullabilityInferenceProblem6 {
 companion object {
  @JvmStatic
  internal fun testLambda_pp_j2kt(from: Container<*>, to: Container<in Any?>) {
   (from as Container<Any?>).forEach(
    Consumer { it: Any? ->
     to.add(it)
    },
   )
  }

  @JvmStatic
  internal fun testMethodReference_pp_j2kt(from: Container<*>, to: Container<in Any?>) {
   (from as Container<Any?>).forEach(
    Consumer { arg0: Any? ->
     to.add(arg0)
    },
   )
  }

  @JvmStatic
  internal fun testLambda_pp_j2kt(from: FooContainer<*>, to: FooContainer<in Foo?>) {
   (from as FooContainer<Foo?>).forEach(
    Consumer { it: Foo? ->
     to.add(it)
    },
   )
  }

  @JvmStatic
  internal fun testMethodReference_pp_j2kt(from: FooContainer<*>, to: FooContainer<in Foo?>) {
   (from as FooContainer<Foo?>).forEach(
    Consumer { arg0: Foo? ->
     to.add(arg0)
    },
   )
  }
 }

 fun interface Consumer<V> {
  fun accept(v: V)
 }

 interface Container<V> {
  fun forEach(consumer: Consumer<V>)

  fun add(v: V)
 }

 interface Foo

 fun interface FooConsumer<V: Foo?> {
  fun accept(v: V)
 }

 interface FooContainer<V: Foo?> {
  fun forEach(consumer: Consumer<V>)

  fun add(v: V)
 }
}
