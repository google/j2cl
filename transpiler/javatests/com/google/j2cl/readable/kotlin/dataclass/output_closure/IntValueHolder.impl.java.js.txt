goog.module('dataclass.IntValueHolder$impl');

const ValueHolder = goog.require('dataclass.ValueHolder$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let InternalPreconditions = goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');
let JsUtils = goog.forwardDeclare('javaemul.internal.JsUtils$impl');
let $Equality = goog.forwardDeclare('nativebootstrap.Equality$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');
let $Objects = goog.forwardDeclare('vmbootstrap.Objects$impl');

/**
 * @final
 * @implements {ValueHolder<!Integer>}
 */
class IntValueHolder extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
  /**@type {number} @nodts*/
  this.f_backingValue__dataclass_IntValueHolder_ = 0;
 }
 /** @nodts @return {!IntValueHolder} */
 static $create__int(/** number */ backingValue) {
  IntValueHolder.$clinit();
  let $instance = new IntValueHolder();
  $instance.$ctor__dataclass_IntValueHolder__int__void(backingValue);
  return $instance;
 }
 /** @nodts */
 $ctor__dataclass_IntValueHolder__int__void(/** number */ backingValue) {
  this.$ctor__java_lang_Object__void();
  this.f_backingValue__dataclass_IntValueHolder_ = backingValue;
 }
 /** @nodts @return {number} */
 m_getBackingValue__int() {
  return this.f_backingValue__dataclass_IntValueHolder_;
 }
 /** @final @nodts @return {number} */
 m_component1__int() {
  return this.f_backingValue__dataclass_IntValueHolder_;
 }
 /** @final @nodts @return {!IntValueHolder} */
 m_copy__int__dataclass_IntValueHolder(/** number */ backingValue) {
  return IntValueHolder.$create__int(backingValue);
 }
 /** @final @nodts @return {!IntValueHolder} */
 m_copy$default__int__dataclass_IntValueHolder(/** number= */ backingValue) {
  let backingValue$defaulted = JsUtils.isUndefined(backingValue) ? this.f_backingValue__dataclass_IntValueHolder_ : backingValue;
  return this.m_copy__int__dataclass_IntValueHolder(backingValue$defaulted);
 }
 /** @override @return {string} */
 toString() {
  return '' + 'IntValueHolder(' + 'backingValue=' + this.f_backingValue__dataclass_IntValueHolder_ + ')';
 }
 /** @override @return {number} */
 hashCode() {
  return $Objects.m_hashCode__java_lang_Object__int(Integer.valueOf(this.f_backingValue__dataclass_IntValueHolder_));
 }
 /** @override @return {boolean} */
 equals(/** * */ other) {
  if ($Equality.$same(this, other)) {
   return true;
  }
  if (!IntValueHolder.$isInstance(other)) {
   return false;
  }
  let tmp0_other_with_cast = /**@type {!IntValueHolder}*/ ($Casts.$to(InternalPreconditions.m_checkNotNull__java_lang_Object__java_lang_Object(other), IntValueHolder));
  if (this.f_backingValue__dataclass_IntValueHolder_ != tmp0_other_with_cast.f_backingValue__dataclass_IntValueHolder_) {
   return false;
  }
  return true;
 }
 //Bridge method.
 /** @final @override @nodts @suppress{visibility} @return {!Integer} */
 m_getBackingValue__java_lang_Object() {
  return Integer.valueOf(this.m_getBackingValue__int());
 }
 /** @nodts */
 static $clinit() {
  IntValueHolder.$clinit = () =>{};
  IntValueHolder.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof IntValueHolder;
 }
 
 /** @nodts */
 static $loadModules() {
  Integer = goog.module.get('java.lang.Integer$impl');
  InternalPreconditions = goog.module.get('javaemul.internal.InternalPreconditions$impl');
  JsUtils = goog.module.get('javaemul.internal.JsUtils$impl');
  $Equality = goog.module.get('nativebootstrap.Equality$impl');
  $Casts = goog.module.get('vmbootstrap.Casts$impl');
  $Objects = goog.module.get('vmbootstrap.Objects$impl');
 }
}
ValueHolder.$markImplementor(IntValueHolder);
$Util.$setClassMetadata(IntValueHolder, 'dataclass.IntValueHolder');

exports = IntValueHolder;

//# sourceMappingURL=IntValueHolder.js.map
