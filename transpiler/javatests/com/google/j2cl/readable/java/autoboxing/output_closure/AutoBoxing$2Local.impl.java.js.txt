goog.module('autoboxing.AutoBoxing.$2Local$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Comparable = goog.forwardDeclare('java.lang.Comparable$impl');
let Long = goog.forwardDeclare('java.lang.Long$impl');
let $Long = goog.forwardDeclare('nativebootstrap.Long$impl');
let $Asserts = goog.forwardDeclare('vmbootstrap.Asserts$impl');

/**
 * @template T, T_1
 */
class $2Local extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @template T, T_1 @return {!$2Local<T, T_1>} */
 static $create__() {
  $2Local.$clinit();
  let $instance = new $2Local();
  $instance.$ctor__autoboxing_AutoBoxing_2Local__void();
  return $instance;
 }
 /** @nodts */
 $ctor__autoboxing_AutoBoxing_2Local__void() {
  this.$ctor__java_lang_Object__void();
 }
 /** @nodts @return {!$Long} */
 m_toLong__java_lang_Long__long_$pp_autoboxing(/** T */ l) {
  $Asserts.$assert(Long.m_equals__java_lang_Long__java_lang_Object__boolean(/**@type {!$Long}*/ (l), $Long.fromInt(11)));
  return Long.m_longValue__java_lang_Long__long(/**@type {!$Long}*/ (l));
 }
 /** @nodts */
 static $clinit() {
  $2Local.$clinit = () =>{};
  $2Local.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof $2Local;
 }
 
 /** @nodts */
 static $loadModules() {
  Long = goog.module.get('java.lang.Long$impl');
  $Long = goog.module.get('nativebootstrap.Long$impl');
  $Asserts = goog.module.get('vmbootstrap.Asserts$impl');
 }
}
$Util.$setClassMetadata($2Local, 'autoboxing.AutoBoxing$2Local');

exports = $2Local;

//# sourceMappingURL=AutoBoxing$2Local.js.map
