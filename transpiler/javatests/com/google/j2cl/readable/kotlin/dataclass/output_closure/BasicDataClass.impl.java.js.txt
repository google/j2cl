goog.module('dataclass.BasicDataClass$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let InternalPreconditions = goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');
let DefaultConstructorMarker = goog.forwardDeclare('kotlin.jvm.internal.DefaultConstructorMarker$impl');
let $Equality = goog.forwardDeclare('nativebootstrap.Equality$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');
let $Objects = goog.forwardDeclare('vmbootstrap.Objects$impl');

/**
 * @final
 */
class BasicDataClass extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
  /**@type {number} @nodts*/
  this.f_foo__dataclass_BasicDataClass_ = 0;
  /**@type {number} @nodts*/
  this.f_bar__dataclass_BasicDataClass_ = 0;
 }
 //Factory method corresponding to constructor 'BasicDataClass(int, int)'.
 /** @nodts @return {!BasicDataClass} */
 static $create__int__int(/** number */ foo, /** number */ bar) {
  BasicDataClass.$clinit();
  let $instance = new BasicDataClass();
  $instance.$ctor__dataclass_BasicDataClass__int__int__void(foo, bar);
  return $instance;
 }
 //Initialization from constructor 'BasicDataClass(int, int)'.
 /** @nodts */
 $ctor__dataclass_BasicDataClass__int__int__void(/** number */ foo, /** number */ bar) {
  this.$ctor__java_lang_Object__void();
  this.f_foo__dataclass_BasicDataClass_ = foo;
  this.f_bar__dataclass_BasicDataClass_ = bar;
 }
 //Factory method corresponding to constructor 'BasicDataClass(int, int, int, DefaultConstructorMarker)'.
 /** @nodts @return {!BasicDataClass} */
 static $create__int__int__int__kotlin_jvm_internal_DefaultConstructorMarker(/** number */ foo, /** number */ bar, /** number */ $mask0, /** DefaultConstructorMarker */ $marker) {
  BasicDataClass.$clinit();
  let $instance = new BasicDataClass();
  $instance.$ctor__dataclass_BasicDataClass__int__int__int__kotlin_jvm_internal_DefaultConstructorMarker__void(foo, bar, $mask0, $marker);
  return $instance;
 }
 //Initialization from constructor 'BasicDataClass(int, int, int, DefaultConstructorMarker)'.
 /** @nodts */
 $ctor__dataclass_BasicDataClass__int__int__int__kotlin_jvm_internal_DefaultConstructorMarker__void(/** number */ foo, /** number */ bar, /** number */ $mask0, /** DefaultConstructorMarker */ $marker) {
  if (($mask0 & 2) != 0) {
   bar = 10;
  }
  this.$ctor__dataclass_BasicDataClass__int__int__void(foo, bar);
 }
 /** @final @nodts @return {number} */
 m_getFoo__int() {
  return this.f_foo__dataclass_BasicDataClass_;
 }
 /** @final @nodts @return {number} */
 m_getBar__int() {
  return this.f_bar__dataclass_BasicDataClass_;
 }
 /** @final @nodts @return {number} */
 m_component1__int() {
  return this.f_foo__dataclass_BasicDataClass_;
 }
 /** @final @nodts @return {number} */
 m_component2__int() {
  return this.f_bar__dataclass_BasicDataClass_;
 }
 /** @final @nodts @return {!BasicDataClass} */
 m_copy__int__int__dataclass_BasicDataClass(/** number */ foo, /** number */ bar) {
  return BasicDataClass.$create__int__int(foo, bar);
 }
 /** @final @nodts @return {!BasicDataClass} */
 m_copy$default__int__int__int__java_lang_Object__dataclass_BasicDataClass(/** number */ foo, /** number */ bar, /** number */ $mask0, /** * */ $handler) {
  if (($mask0 & 1) != 0) {
   foo = this.f_foo__dataclass_BasicDataClass_;
  }
  if (($mask0 & 2) != 0) {
   bar = this.f_bar__dataclass_BasicDataClass_;
  }
  return this.m_copy__int__int__dataclass_BasicDataClass(foo, bar);
 }
 /** @override @return {string} */
 toString() {
  return '' + 'BasicDataClass(' + 'foo=' + this.f_foo__dataclass_BasicDataClass_ + ', ' + 'bar=' + this.f_bar__dataclass_BasicDataClass_ + ')';
 }
 /** @override @return {number} */
 hashCode() {
  let result = $Objects.m_hashCode__java_lang_Object__int(Integer.m_valueOf__int__java_lang_Integer(this.f_foo__dataclass_BasicDataClass_));
  result = Math.imul(result, 31) + $Objects.m_hashCode__java_lang_Object__int(Integer.m_valueOf__int__java_lang_Integer(this.f_bar__dataclass_BasicDataClass_)) | 0;
  return result;
 }
 /** @override @return {boolean} */
 equals(/** * */ other) {
  if ($Equality.$same(this, other)) {
   return true;
  }
  if (!BasicDataClass.$isInstance(other)) {
   return false;
  }
  let tmp0_other_with_cast = /**@type {!BasicDataClass}*/ ($Casts.$to(InternalPreconditions.m_checkNotNull__java_lang_Object__java_lang_Object(other), BasicDataClass));
  if (this.f_foo__dataclass_BasicDataClass_ != tmp0_other_with_cast.f_foo__dataclass_BasicDataClass_) {
   return false;
  }
  if (this.f_bar__dataclass_BasicDataClass_ != tmp0_other_with_cast.f_bar__dataclass_BasicDataClass_) {
   return false;
  }
  return true;
 }
 /** @nodts */
 static $clinit() {
  BasicDataClass.$clinit = () =>{};
  BasicDataClass.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof BasicDataClass;
 }
 
 /** @nodts */
 static $loadModules() {
  Integer = goog.module.get('java.lang.Integer$impl');
  InternalPreconditions = goog.module.get('javaemul.internal.InternalPreconditions$impl');
  $Equality = goog.module.get('nativebootstrap.Equality$impl');
  $Casts = goog.module.get('vmbootstrap.Casts$impl');
  $Objects = goog.module.get('vmbootstrap.Objects$impl');
 }
}
$Util.$setClassMetadata(BasicDataClass, 'dataclass.BasicDataClass');

exports = BasicDataClass;

//# sourceMappingURL=BasicDataClass.js.map
