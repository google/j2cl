const foo_Bar = goog.require('foo.Bar');
const foo_Baz = goog.require('foo.Baz');
const j2wasm_CharUtils = goog.require('j2wasm.CharUtils');
const j2wasm_ConsoleUtils = goog.require('j2wasm.ConsoleUtils');
const j2wasm_DoubleUtils = goog.require('j2wasm.DoubleUtils');
const j2wasm_ExceptionUtils = goog.require('j2wasm.ExceptionUtils');
const j2wasm_StringUtils = goog.require('j2wasm.StringUtils');

/** @return {!Object<string, *>} Wasm import object */
function getImports() {
 return {
  'WebAssembly': WebAssembly,
  'imports': {
   '?.toString': (/** ? */ $instance, ) => $instance.toString(),
   'Date.UTC': Date.UTC,
   'Date.constructor': () => new Date(),
   'Date.constructor$1': (/** number */ milliseconds, ) => new Date(milliseconds, ),
   'Date.constructor$7': (/** number */ year, /** number */ month, /** number */ dayOfMonth, /** number */ hours, /** number */ minutes, /** number */ seconds, /** number */ millis, ) => new Date(year, month, dayOfMonth, hours, minutes, seconds, millis, ),
   'Date.getDate': (/** !Date */ $instance, ) => $instance.getDate(),
   'Date.getDay': (/** !Date */ $instance, ) => $instance.getDay(),
   'Date.getFullYear': (/** !Date */ $instance, ) => $instance.getFullYear(),
   'Date.getHours': (/** !Date */ $instance, ) => $instance.getHours(),
   'Date.getMilliseconds': (/** !Date */ $instance, ) => $instance.getMilliseconds(),
   'Date.getMinutes': (/** !Date */ $instance, ) => $instance.getMinutes(),
   'Date.getMonth': (/** !Date */ $instance, ) => $instance.getMonth(),
   'Date.getSeconds': (/** !Date */ $instance, ) => $instance.getSeconds(),
   'Date.getTime': (/** !Date */ $instance, ) => $instance.getTime(),
   'Date.getTimezoneOffset': (/** !Date */ $instance, ) => $instance.getTimezoneOffset(),
   'Date.getUTCDate': (/** !Date */ $instance, ) => $instance.getUTCDate(),
   'Date.getUTCFullYear': (/** !Date */ $instance, ) => $instance.getUTCFullYear(),
   'Date.getUTCHours': (/** !Date */ $instance, ) => $instance.getUTCHours(),
   'Date.getUTCMinutes': (/** !Date */ $instance, ) => $instance.getUTCMinutes(),
   'Date.getUTCMonth': (/** !Date */ $instance, ) => $instance.getUTCMonth(),
   'Date.getUTCSeconds': (/** !Date */ $instance, ) => $instance.getUTCSeconds(),
   'Date.now': Date.now,
   'Date.parse': Date.parse,
   'Date.setDate$1': (/** !Date */ $instance, /** number */ dayOfMonth, ) => $instance.setDate(dayOfMonth, ),
   'Date.setFullYear$1': (/** !Date */ $instance, /** number */ year, ) => $instance.setFullYear(year, ),
   'Date.setFullYear$3': (/** !Date */ $instance, /** number */ year, /** number */ month, /** number */ day, ) => $instance.setFullYear(year, month, day, ),
   'Date.setHours$1': (/** !Date */ $instance, /** number */ hours, ) => $instance.setHours(hours, ),
   'Date.setHours$4': (/** !Date */ $instance, /** number */ hours, /** number */ mins, /** number */ secs, /** number */ ms, ) => $instance.setHours(hours, mins, secs, ms, ),
   'Date.setMinutes$1': (/** !Date */ $instance, /** number */ minutes, ) => $instance.setMinutes(minutes, ),
   'Date.setMonth$1': (/** !Date */ $instance, /** number */ month, ) => $instance.setMonth(month, ),
   'Date.setSeconds$1': (/** !Date */ $instance, /** number */ seconds, ) => $instance.setSeconds(seconds, ),
   'Date.setTime$1': (/** !Date */ $instance, /** number */ milliseconds, ) => $instance.setTime(milliseconds, ),
   'Date.toLocaleString': (/** !Date */ $instance, ) => $instance.toLocaleString(),
   'Error': Error,
   'Error.captureStackTrace': Error.captureStackTrace,
   'Error.constructor': () => new Error(),
   'Math.acos': Math.acos,
   'Math.asin': Math.asin,
   'Math.atan': Math.atan,
   'Math.atan2': Math.atan2,
   'Math.cbrt': Math.cbrt,
   'Math.cos': Math.cos,
   'Math.cosh': Math.cosh,
   'Math.exp': Math.exp,
   'Math.expm1': Math.expm1,
   'Math.floor': Math.floor,
   'Math.hypot': Math.hypot,
   'Math.log': Math.log,
   'Math.log10': Math.log10,
   'Math.log1p': Math.log1p,
   'Math.max': Math.max,
   'Math.pow': Math.pow,
   'Math.random': Math.random,
   'Math.round': Math.round,
   'Math.sign': Math.sign,
   'Math.sin': Math.sin,
   'Math.sinh': Math.sinh,
   'Math.tan': Math.tan,
   'Math.tanh': Math.tanh,
   'Number.prototype.toPrecision.call$2': (/** number */ value, /** number */ precision, ) => Number.prototype.toPrecision.call(value, precision, ),
   'Number.prototype.toString.call$1': (/** number */ d, ) => Number.prototype.toString.call(d, ),
   'Number.prototype.toString.call$2': (/** number */ i, /** number */ radix, ) => Number.prototype.toString.call(i, radix, ),
   'Object.constructor': () => new Object(),
   'RegExp.constructor$1': (/** string */ regex, ) => new RegExp(regex, ),
   'RegExp.constructor$2': (/** string */ regex, /** string */ mode, ) => new RegExp(regex, mode, ),
   'RegExp.exec$1': (/** !RegExp */ $instance, /** string */ value, ) => $instance.exec(value, ),
   'RegExp.test$1': (/** !RegExp */ $instance, /** string */ value, ) => $instance.test(value, ),
   'RegExpResult.at$1': (/** !RegExpResult */ $instance, /** number */ index, ) => $instance.at(index, ),
   'atob': atob,
   'btoa': btoa,
   'foo.Bar.baz': foo_Bar.baz,
   'foo.Baz.baz': foo_Baz.baz,
   'get Error.captureStackTrace': () => Error.captureStackTrace,
   'get Error.stack': (/** !Error */ $instance, ) => $instance.stack,
   'get Math.PI': () => Math.PI,
   'get RegExpResult.index': (/** !RegExpResult */ $instance, ) => $instance.index,
   'get RegExpResult.length': (/** !RegExpResult */ $instance, ) => $instance.length,
   'get foo.Bar.field': () => foo_Bar.field,
   'get top': () => top,
   'get window.top': () => window.top,
   'isFinite': isFinite,
   'j2wasm.CharUtils.charToLowerCase': j2wasm_CharUtils.charToLowerCase,
   'j2wasm.CharUtils.charToUpperCase': j2wasm_CharUtils.charToUpperCase,
   'j2wasm.CharUtils.codePointToLowerCase': j2wasm_CharUtils.codePointToLowerCase,
   'j2wasm.CharUtils.codePointToUpperCase': j2wasm_CharUtils.codePointToUpperCase,
   'j2wasm.ConsoleUtils.log': j2wasm_ConsoleUtils.log,
   'j2wasm.DoubleUtils.dmod': j2wasm_DoubleUtils.dmod,
   'j2wasm.DoubleUtils.isValidDouble': j2wasm_DoubleUtils.isValidDouble,
   'j2wasm.ExceptionUtils.getJavaThrowable': j2wasm_ExceptionUtils.getJavaThrowable,
   'j2wasm.ExceptionUtils.isError': j2wasm_ExceptionUtils.isError,
   'j2wasm.ExceptionUtils.setJavaThrowable': j2wasm_ExceptionUtils.setJavaThrowable,
   'j2wasm.StringUtils.compareToIgnoreCase': j2wasm_StringUtils.compareToIgnoreCase,
   'j2wasm.StringUtils.equalsIgnoreCase': j2wasm_StringUtils.equalsIgnoreCase,
   'j2wasm.StringUtils.generateClassName': j2wasm_StringUtils.generateClassName,
   'parseFloat': parseFloat,
   'performance.now': () => performance.now(),
   'set Error.stack': (/** !Error */ $instance, /** string */ value, ) => $instance.stack = value,
   'set Math.PI': (/** number */ value, ) => Math.PI = value,
   'set RegExp.lastIndex': (/** !RegExp */ $instance, /** number */ index, ) => $instance.lastIndex = index,
   'set foo.Bar.field': (/** number */ value, ) => foo_Bar.field = value,
   'set top': (/** number */ value, ) => top = value,
   'set window.top': (/** number */ value, ) => window.top = value,
   'string.indexOf$1': (/** string */ $instance, /** string */ str, ) => $instance.indexOf(str, ),
   'string.indexOf$2': (/** string */ $instance, /** string */ str, /** number */ startIndex, ) => $instance.indexOf(str, startIndex, ),
   'string.lastIndexOf$1': (/** string */ $instance, /** string */ str, ) => $instance.lastIndexOf(str, ),
   'string.lastIndexOf$2': (/** string */ $instance, /** string */ str, /** number */ start, ) => $instance.lastIndexOf(str, start, ),
   'string.repeat$1': (/** string */ $instance, /** number */ count, ) => $instance.repeat(count, ),
   'string.replace$2': (/** string */ $instance, /** !RegExp */ regex, /** string */ replace, ) => $instance.replace(regex, replace, ),
   'string.toLocaleLowerCase': (/** string */ $instance, ) => $instance.toLocaleLowerCase(),
   'string.toLocaleUpperCase': (/** string */ $instance, ) => $instance.toLocaleUpperCase(),
   'string.toLowerCase': (/** string */ $instance, ) => $instance.toLowerCase(),
   'string.toUpperCase': (/** string */ $instance, ) => $instance.toUpperCase(),
   'window.Object.constructor': () => new window.Object(),
  }
 };
}

