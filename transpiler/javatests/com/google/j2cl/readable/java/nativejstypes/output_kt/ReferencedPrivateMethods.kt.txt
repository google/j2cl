// Generated from "nativejstypes/ReferencedPrivateMethods.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "INCOMPATIBLE_OBJC_NAME_OVERRIDE",
 "REDUNDANT_ELSE_IN_WHEN")

package nativejstypes

import javaemul.lang.*
import jsinterop.annotations.JsMethod
import jsinterop.annotations.JsProperty
import jsinterop.annotations.JsType
import kotlin.Int
import kotlin.Suppress
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic

open class ReferencedPrivateMethods internal constructor() {
 open class Inner {
  open fun getInstance(): Int {
   val t: NativeReferencedPrivateMethods = NativeReferencedPrivateMethods()
   return t.x_private_2 + NativeReferencedPrivateMethods.s_private_2 + t.getInstance_private_2() + NativeReferencedPrivateMethods.getStatic_private_2()
  }
 }

 @JsType(namespace = "nativejstypes", isNative = true)
 open class NativeReferencedPrivateMethods internal constructor() {
  @JvmField
  @JsProperty(name = "x")
  internal var x_private_2: Int = 0

  @JsMethod(name = "getInstance")
  internal external fun getInstance_private_2(): Int

  companion object {
   @JvmField
   @JsProperty(name = "s")
   internal var s_private_2: Int = 0

   @JvmStatic
   @JsMethod(name = "getStatic")
   internal external fun getStatic_private_2(): Int
  }
 }
}
