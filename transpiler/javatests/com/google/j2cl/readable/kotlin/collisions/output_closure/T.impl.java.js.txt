goog.module('collisions.T$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Number = goog.forwardDeclare('java.lang.Number$impl');
let InternalPreconditions = goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');
let $Numbers = goog.forwardDeclare('vmbootstrap.Numbers$impl');

/**
 * @final
 * @template T_1
 */
class T extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @template T_1 @return {!T<T_1>} */
 static $create__() {
  T.$clinit();
  let $instance = new T();
  $instance.$ctor__collisions_T__void();
  return $instance;
 }
 /** @nodts */
 $ctor__collisions_T__void() {
  this.$ctor__java_lang_Object__void();
 }
 /** @final @nodts @return {?T_1} */
 m_m__java_lang_Number() {
  return null;
 }
 /** @final @nodts @return {?T_1} */
 m_n__java_lang_Number() {
  let t = (/**@type {!T<T_1>}*/ (T.$create__())).m_m__java_lang_Number();
  $Numbers.m_byteValue__java_lang_Number__byte(/**@type {!(Number|number)}*/ (InternalPreconditions.m_checkNotNull__java_lang_Object__java_lang_Object(t)));
  return t;
 }
 /** @nodts */
 static $clinit() {
  T.$clinit = () =>{};
  T.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof T;
 }
 
 /** @nodts */
 static $loadModules() {
  InternalPreconditions = goog.module.get('javaemul.internal.InternalPreconditions$impl');
  $Numbers = goog.module.get('vmbootstrap.Numbers$impl');
 }
}
$Util.$setClassMetadata(T, 'collisions.T');

exports = T;

//# sourceMappingURL=T.js.map
