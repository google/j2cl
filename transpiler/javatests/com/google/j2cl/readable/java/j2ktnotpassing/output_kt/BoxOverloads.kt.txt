// Generated from "j2ktnotpassing/BoxOverloads.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "INCOMPATIBLE_OBJC_NAME_OVERRIDE",
 "REDUNDANT_ELSE_IN_WHEN")

package j2ktnotpassing

import javaemul.lang.*
import kotlin.Double
import kotlin.Suppress
import kotlin.jvm.JvmStatic

open class BoxOverloads {
 companion object {
  @JvmStatic
  fun boxedOverload(d: Double) {}

  @JvmStatic
  fun boxedOverload(d: Double) {}

  @JvmStatic
  fun testBoxedOverload() {
   BoxOverloads.boxedOverload(1.25)
   BoxOverloads.boxedOverload(
    java.lang.Double.valueOf(1.25),
   )
   BoxOverloads.boxedOverload(
    Double(1.25),
   )
   BoxOverloads.boxedOverload(1.0)
  }

  @JvmStatic
  fun testGenericBoxedOverload(generic: Generic<Double>) {
   generic.overload(1.25)
   generic.overload(
    java.lang.Double.valueOf(1.25),
   )
   generic.overload(1.0)
  }
 }

 interface Generic<T> {
  fun overload(d: Double)

  fun overload(t: T)
 }
}
