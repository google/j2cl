goog.module('forstatement.ForStatement$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let ArrayList = goog.forwardDeclare('java.util.ArrayList$impl');
let ProgressionUtilKt = goog.forwardDeclare('kotlin.internal.ProgressionUtilKt$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');
let $Primitives = goog.forwardDeclare('vmbootstrap.Primitives$impl');

/**
 * @final
 */
class ForStatement extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
 }
 /** @nodts @return {!ForStatement} */
 static $create__() {
  ForStatement.$clinit();
  let $instance = new ForStatement();
  $instance.$ctor__forstatement_ForStatement__void();
  return $instance;
 }
 /** @nodts */
 $ctor__forstatement_ForStatement__void() {
  this.$ctor__java_lang_Object__void();
 }
 /** @final @nodts */
 m_test__void() {
  let count = 0;
  for (let inductionVariable = 1; inductionVariable <= 3; inductionVariable = inductionVariable + 1 | 0) {
   let i = inductionVariable;
   count = i;
  }
  for (let inductionVariable_1 = 0; inductionVariable_1 < 100; inductionVariable_1 = inductionVariable_1 + 1 | 0) {
   let i_1 = inductionVariable_1;
   count = i_1;
  }
  for (let inductionVariable_2 = 97 /* 'a' */; inductionVariable_2 < 122 /* 'z' */; inductionVariable_2 = $Primitives.narrowIntToChar(inductionVariable_2 + 1 | 0)) {
   let c = inductionVariable_2;
  }
  let tmp = -2;
  let inductionVariable_3 = 6;
  let last = ProgressionUtilKt.m_getProgressionLastElement__int__int__int__int(6, 0, tmp);
  if (last <= inductionVariable_3) {
   let /** number */ i_2;
   do {
    i_2 = inductionVariable_3;
    inductionVariable_3 = inductionVariable_3 + tmp | 0;
    count = i_2;
   } while (i_2 != last);
  }
  let list = /**@type {!ArrayList<!Integer>}*/ (ArrayList.$create__());
  for (let $iterator = list.m_iterator__java_util_Iterator(); $iterator.m_hasNext__boolean(); ) {
   let l = (/**@type {!Integer}*/ ($Casts.$to($iterator.m_next__java_lang_Object(), Integer))).m_intValue__int();
   {
    count = l;
   }
  }
  if (false) {
   for (let inductionVariable_4 = 0; inductionVariable_4 <= 99; inductionVariable_4 = inductionVariable_4 + 1 | 0) {
    let i_3 = inductionVariable_4;
   }
  }
  for (let inductionVariable_5 = 0; inductionVariable_5 <= 10; inductionVariable_5 = inductionVariable_5 + 1 | 0) {
   let i_4 = inductionVariable_5;
   for (let inductionVariable_6 = 0; inductionVariable_6 < 10; inductionVariable_6 = inductionVariable_6 + 1 | 0) {
    let j = inductionVariable_6;
   }
  }
 }
 /** @nodts */
 static $clinit() {
  ForStatement.$clinit = () =>{};
  ForStatement.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof ForStatement;
 }
 
 /** @nodts */
 static $loadModules() {
  Integer = goog.module.get('java.lang.Integer$impl');
  ArrayList = goog.module.get('java.util.ArrayList$impl');
  ProgressionUtilKt = goog.module.get('kotlin.internal.ProgressionUtilKt$impl');
  $Casts = goog.module.get('vmbootstrap.Casts$impl');
  $Primitives = goog.module.get('vmbootstrap.Primitives$impl');
 }
}
$Util.$setClassMetadata(ForStatement, 'forstatement.ForStatement');

exports = ForStatement;

//# sourceMappingURL=ForStatement.js.map
