// Generated from "j2kt/NullabilityInferenceProblem7.java"
@file:Suppress(
 "ALWAYS_NULL",
 "PARAMETER_NAME_CHANGED_ON_OVERRIDE",
 "SENSELESS_COMPARISON",
 "UNCHECKED_CAST",
 "UNNECESSARY_LATEINIT",
 "UNNECESSARY_NOT_NULL_ASSERTION",
 "UNREACHABLE_CODE",
 "UNUSED_ANONYMOUS_PARAMETER",
 "UNUSED_PARAMETER",
 "UNUSED_VARIABLE",
 "USELESS_CAST",
 "VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL",
 "VARIABLE_WITH_REDUNDANT_INITIALIZER",
 "INCOMPATIBLE_OBJC_NAME_OVERRIDE",
 "REDUNDANT_ELSE_IN_WHEN")

package j2kt

import javaemul.lang.*
import kotlin.Any
import kotlin.Suppress
import kotlin.jvm.JvmStatic

open class NullabilityInferenceProblem7 {
 companion object {
  @JvmStatic
  internal fun <T: Any> test1_pp_j2kt(ordering: Ordering<T>, t1: T, t2: T): T {
   val local1: T? = t1
   val local2: T? = t2
   return ordering.max<T>(
    local1!!,
    local2!!,
   )
  }

  @JvmStatic
  internal fun test2_pp_j2kt(ordering: Ordering<Foo>, foo1: Foo, foo2: Foo): Foo {
   val localFoo1: Foo = foo1
   val localFoo2: Foo = foo2
   return ordering.max<Foo>(localFoo1, localFoo2)
  }

  @JvmStatic
  internal fun test3_pp_j2kt(ordering: FooOrdering, foo1: Foo, foo2: Foo): Foo {
   val localFoo1: Foo = foo1
   val localFoo2: Foo = foo2
   return ordering.max<Foo>(localFoo1, localFoo2)
  }
 }

 interface Foo

 interface Ordering<V> {
  fun <T: V> max(v1: T, v2: T): T
 }

 interface FooOrdering: Ordering<Foo>
}
